// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package associationcommandconfiguration

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandConfigurationReport cc.CommandID = 0x05

func init() {
	gob.Register(ConfigurationReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x9B),
		Command:      cc.CommandID(0x05),
		Version:      1,
	}, NewConfigurationReport)
}

func NewConfigurationReport() cc.Command {
	return &ConfigurationReport{}
}

// <no value>
type ConfigurationReport struct {
	GroupingIdentifier byte

	NodeId byte

	Properties1 struct {
		ReportsToFollow byte

		First bool
	}

	CommandLength byte

	CommandClassIdentifier byte

	CommandIdentifier byte

	CommandByte []byte
}

func (cmd ConfigurationReport) CommandClassID() cc.CommandClassID {
	return 0x9B
}

func (cmd ConfigurationReport) CommandID() cc.CommandID {
	return CommandConfigurationReport
}

func (cmd ConfigurationReport) CommandIDString() string {
	return "COMMAND_CONFIGURATION_REPORT"
}

func (cmd *ConfigurationReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.GroupingIdentifier = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NodeId = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.ReportsToFollow = (payload[i] & 0x0F)

	cmd.Properties1.First = payload[i]&0x80 == 0x80

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.CommandLength = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.CommandClassIdentifier = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.CommandIdentifier = payload[i]
	i++

	if len(payload) <= i {
		return nil
	}

	cmd.CommandByte = payload[i:]

	return nil
}

func (cmd *ConfigurationReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.GroupingIdentifier)

	payload = append(payload, cmd.NodeId)

	{
		var val byte

		val |= (cmd.Properties1.ReportsToFollow) & byte(0x0F)

		if cmd.Properties1.First {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	payload = append(payload, cmd.CommandLength)

	payload = append(payload, cmd.CommandClassIdentifier)

	payload = append(payload, cmd.CommandIdentifier)

	payload = append(payload, cmd.CommandByte...)

	return
}
