// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package multichannelv2

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandEndPointReport cc.CommandID = 0x08

func init() {
	gob.Register(EndPointReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x60),
		Command:      cc.CommandID(0x08),
		Version:      2,
	}, NewEndPointReport)
}

func NewEndPointReport() cc.Command {
	return &EndPointReport{}
}

// <no value>
type EndPointReport struct {
	Properties1 struct {
		Res1 byte

		Identical bool

		Dynamic bool
	}

	Properties2 struct {
		EndPoints byte

		Res2 bool
	}
}

func (cmd EndPointReport) CommandClassID() cc.CommandClassID {
	return 0x60
}

func (cmd EndPointReport) CommandID() cc.CommandID {
	return CommandEndPointReport
}

func (cmd EndPointReport) CommandIDString() string {
	return "MULTI_CHANNEL_END_POINT_REPORT"
}

func (cmd *EndPointReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.Res1 = (payload[i] & 0x3F)

	cmd.Properties1.Identical = payload[i]&0x40 == 0x40

	cmd.Properties1.Dynamic = payload[i]&0x80 == 0x80

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties2.EndPoints = (payload[i] & 0x7F)

	cmd.Properties2.Res2 = payload[i]&0x80 == 0x80

	i += 1

	return nil
}

func (cmd *EndPointReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	{
		var val byte

		val |= (cmd.Properties1.Res1) & byte(0x3F)

		if cmd.Properties1.Identical {
			val |= byte(0x40) // flip bits on
		} else {
			val &= ^byte(0x40) // flip bits off
		}

		if cmd.Properties1.Dynamic {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	{
		var val byte

		val |= (cmd.Properties2.EndPoints) & byte(0x7F)

		if cmd.Properties2.Res2 {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	return
}
