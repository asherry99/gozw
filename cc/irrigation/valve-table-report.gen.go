// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package irrigation

import (
	"encoding/binary"
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandValveTableReport cc.CommandID = 0x10

func init() {
	gob.Register(ValveTableReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x6B),
		Command:      cc.CommandID(0x10),
		Version:      1,
	}, NewValveTableReport)
}

func NewValveTableReport() cc.Command {
	return &ValveTableReport{}
}

// <no value>
type ValveTableReport struct {
	ValveTableId byte

	Vg1 []ValveTableReportVg1
}

type ValveTableReportVg1 struct {
	ValveId byte

	Duration uint16
}

func (cmd ValveTableReport) CommandClassID() cc.CommandClassID {
	return 0x6B
}

func (cmd ValveTableReport) CommandID() cc.CommandID {
	return CommandValveTableReport
}

func (cmd ValveTableReport) CommandIDString() string {
	return "IRRIGATION_VALVE_TABLE_REPORT"
}

func (cmd *ValveTableReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.ValveTableId = payload[i]
	i++

	for i < len(payload) {

		vg1 := ValveTableReportVg1{}

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		valveId := payload[i]
		i++

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		duration := binary.BigEndian.Uint16(payload[i : i+2])
		i += 2

		vg1.ValveId = valveId

		vg1.Duration = duration

		cmd.Vg1 = append(cmd.Vg1, vg1)
	}

	return nil
}

func (cmd *ValveTableReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.ValveTableId)

	for _, vg := range cmd.Vg1 {

		payload = append(payload, vg.ValveId)

		{
			buf := make([]byte, 2)
			binary.BigEndian.PutUint16(buf, vg.Duration)
			payload = append(payload, buf...)
		}

	}

	return
}
