// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package crc16encap

import (
	"encoding/binary"
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandCrc16Encap cc.CommandID = 0x01

func init() {
	gob.Register(Crc16Encap{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x56),
		Command:      cc.CommandID(0x01),
		Version:      1,
	}, NewCrc16Encap)
}

func NewCrc16Encap() cc.Command {
	return &Crc16Encap{}
}

// <no value>
type Crc16Encap struct {
	CommandClass byte

	Command byte

	Data []byte

	Checksum uint16
}

func (cmd Crc16Encap) CommandClassID() cc.CommandClassID {
	return 0x56
}

func (cmd Crc16Encap) CommandID() cc.CommandID {
	return CommandCrc16Encap
}

func (cmd Crc16Encap) CommandIDString() string {
	return "CRC_16_ENCAP"
}

func (cmd *Crc16Encap) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.CommandClass = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Command = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Data = payload[i : len(payload)-2]
	i += len(cmd.Data)

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Checksum = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	return nil
}

func (cmd *Crc16Encap) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.CommandClass)

	payload = append(payload, cmd.Command)

	payload = append(payload, cmd.Data...)

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.Checksum)
		payload = append(payload, buf...)
	}

	return
}

func Noop() {
	// does nothing, just here to allow
	// consumers to invoke the init function
}
