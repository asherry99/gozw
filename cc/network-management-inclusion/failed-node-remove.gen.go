// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package networkmanagementinclusion

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandFailedNodeRemove cc.CommandID = 0x07

func init() {
	gob.Register(FailedNodeRemove{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x34),
		Command:      cc.CommandID(0x07),
		Version:      1,
	}, NewFailedNodeRemove)
}

func NewFailedNodeRemove() cc.Command {
	return &FailedNodeRemove{}
}

// <no value>
type FailedNodeRemove struct {
	SeqNo byte

	NodeId byte
}

func (cmd FailedNodeRemove) CommandClassID() cc.CommandClassID {
	return 0x34
}

func (cmd FailedNodeRemove) CommandID() cc.CommandID {
	return CommandFailedNodeRemove
}

func (cmd FailedNodeRemove) CommandIDString() string {
	return "FAILED_NODE_REMOVE"
}

func (cmd *FailedNodeRemove) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.SeqNo = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NodeId = payload[i]
	i++

	return nil
}

func (cmd *FailedNodeRemove) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.SeqNo)

	payload = append(payload, cmd.NodeId)

	return
}

func Noop() {
	// does nothing, just here to allow
	// consumers to invoke the init function
}
