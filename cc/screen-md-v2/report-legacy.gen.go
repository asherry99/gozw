// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package screenmdv2

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandReportLegacy cc.CommandID = 0x03

func init() {
	gob.Register(ReportLegacy{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x92),
		Command:      cc.CommandID(0x03),
		Version:      2,
	}, NewReportLegacy)
}

func NewReportLegacy() cc.Command {
	return &ReportLegacy{}
}

// <no value>
type ReportLegacy struct {
	Properties1 struct {
		CharPresentation byte

		ScreenSettings byte

		MoreData bool
	}

	Properties2 struct {
		ScreenTimeout bool
	}

	Vg []ReportLegacyVg
}

type ReportLegacyVg struct {
	Properties1 struct {
		LineNumber byte

		LineSettings byte

		Clear bool
	}

	CharacterPosition byte

	NumberOfCharacters byte

	Character []byte
}

func (cmd ReportLegacy) CommandClassID() cc.CommandClassID {
	return 0x92
}

func (cmd ReportLegacy) CommandID() cc.CommandID {
	return CommandReportLegacy
}

func (cmd ReportLegacy) CommandIDString() string {
	return "SCREEN_MD_REPORT_LEGACY"
}

func (cmd *ReportLegacy) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.CharPresentation = (payload[i] & 0x07)

	cmd.Properties1.ScreenSettings = (payload[i] & 0x38) >> 3

	cmd.Properties1.MoreData = payload[i]&0x80 == 0x80

	i += 1

	for i < int(cmd.Properties1.CharPresentation) {

		vg := ReportLegacyVg{}

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		vg.Properties1.LineNumber = (payload[i] & 0x0F)

		vg.Properties1.LineSettings = (payload[i] & 0xE0) >> 5

		vg.Properties1.Clear = payload[i]&0x10 == 0x10

		i += 1

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		characterPosition := payload[i]
		i++

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		numberOfCharacters := payload[i]
		i++

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		length := (payload[2+2]) & 0xFF
		character := payload[i : i+int(length)]
		i += int(length)

		// struct byte fields are assigned to the variant group when computed

		vg.CharacterPosition = characterPosition

		vg.NumberOfCharacters = numberOfCharacters

		vg.Character = character

		cmd.Vg = append(cmd.Vg, vg)
	}

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties2.ScreenTimeout = payload[i]&0x01 == 0x01

	i += 1

	return nil
}

func (cmd *ReportLegacy) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	{
		var val byte

		val |= (cmd.Properties1.CharPresentation) & byte(0x07)

		val |= (cmd.Properties1.ScreenSettings << byte(3)) & byte(0x38)

		if cmd.Properties1.MoreData {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	for _, vg := range cmd.Vg {

		{
			var val byte

			val |= (vg.Properties1.LineNumber) & byte(0x0F)

			val |= (vg.Properties1.LineSettings << byte(5)) & byte(0xE0)

			if vg.Properties1.Clear {
				val |= byte(0x10) // flip bits on
			} else {
				val &= ^byte(0x10) // flip bits off
			}

			payload = append(payload, val)
		}

		payload = append(payload, vg.CharacterPosition)

		payload = append(payload, vg.NumberOfCharacters)

		if vg.Character != nil && len(vg.Character) > 0 {
			payload = append(payload, vg.Character...)
		}

	}

	{
		var val byte

		if cmd.Properties2.ScreenTimeout {
			val |= byte(0x01) // flip bits on
		} else {
			val &= ^byte(0x01) // flip bits off
		}

		payload = append(payload, val)
	}

	return
}
