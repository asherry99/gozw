// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package scheduleentrylockv2

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandScheduleEntryTypeSupportedReport cc.CommandID = 0x0A

func init() {
	gob.Register(ScheduleEntryTypeSupportedReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x4E),
		Command:      cc.CommandID(0x0A),
		Version:      2,
	}, NewScheduleEntryTypeSupportedReport)
}

func NewScheduleEntryTypeSupportedReport() cc.Command {
	return &ScheduleEntryTypeSupportedReport{}
}

// <no value>
type ScheduleEntryTypeSupportedReport struct {
	NumberOfSlotsWeekDay byte

	NumberOfSlotsYearDay byte
}

func (cmd ScheduleEntryTypeSupportedReport) CommandClassID() cc.CommandClassID {
	return 0x4E
}

func (cmd ScheduleEntryTypeSupportedReport) CommandID() cc.CommandID {
	return CommandScheduleEntryTypeSupportedReport
}

func (cmd ScheduleEntryTypeSupportedReport) CommandIDString() string {
	return "SCHEDULE_ENTRY_TYPE_SUPPORTED_REPORT"
}

func (cmd *ScheduleEntryTypeSupportedReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NumberOfSlotsWeekDay = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NumberOfSlotsYearDay = payload[i]
	i++

	return nil
}

func (cmd *ScheduleEntryTypeSupportedReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.NumberOfSlotsWeekDay)

	payload = append(payload, cmd.NumberOfSlotsYearDay)

	return
}
