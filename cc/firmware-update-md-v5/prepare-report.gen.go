// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package firmwareupdatemdv5

import (
	"encoding/binary"
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandPrepareReport cc.CommandID = 0x0B

func init() {
	gob.Register(PrepareReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x7A),
		Command:      cc.CommandID(0x0B),
		Version:      5,
	}, NewPrepareReport)
}

func NewPrepareReport() cc.Command {
	return &PrepareReport{}
}

// <no value>
type PrepareReport struct {
	Status byte

	FirmwareChecksum uint16
}

func (cmd PrepareReport) CommandClassID() cc.CommandClassID {
	return 0x7A
}

func (cmd PrepareReport) CommandID() cc.CommandID {
	return CommandPrepareReport
}

func (cmd PrepareReport) CommandIDString() string {
	return "FIRMWARE_UPDATE_MD_PREPARE_REPORT"
}

func (cmd *PrepareReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Status = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.FirmwareChecksum = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	return nil
}

func (cmd *PrepareReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.Status)

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.FirmwareChecksum)
		payload = append(payload, buf...)
	}

	return
}
