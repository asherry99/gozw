// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package irrigation

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandSystemConfigReport cc.CommandID = 0x07

func init() {
	gob.Register(SystemConfigReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x6B),
		Command:      cc.CommandID(0x07),
		Version:      1,
	}, NewSystemConfigReport)
}

func NewSystemConfigReport() cc.Command {
	return &SystemConfigReport{}
}

// <no value>
type SystemConfigReport struct {
	MasterValveDelay byte

	Properties1 struct {
		HighPressureThresholdSize byte

		HighPressureThresholdScale byte

		HighPressureThresholdPrecision byte
	}

	HighPressureThresholdValue []byte

	Properties2 struct {
		LowPressureThresholdSize byte

		LowPressureThresholdScale byte

		LowPressureThresholdPrecision byte
	}

	LowPressureThresholdValue []byte

	SensorPolarity []byte
}

func (cmd SystemConfigReport) CommandClassID() cc.CommandClassID {
	return 0x6B
}

func (cmd SystemConfigReport) CommandID() cc.CommandID {
	return CommandSystemConfigReport
}

func (cmd SystemConfigReport) CommandIDString() string {
	return "IRRIGATION_SYSTEM_CONFIG_REPORT"
}

func (cmd *SystemConfigReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.MasterValveDelay = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.HighPressureThresholdSize = (payload[i] & 0x07)

	cmd.Properties1.HighPressureThresholdScale = (payload[i] & 0x18) >> 3

	cmd.Properties1.HighPressureThresholdPrecision = (payload[i] & 0xE0) >> 5

	i += 1

	if len(payload) <= i {
		return nil // field is optional
	}

	{
		length := (payload[1+2]) & 0x07
		cmd.HighPressureThresholdValue = payload[i : i+int(length)]
		i += int(length)
	}

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.Properties2.LowPressureThresholdSize = (payload[i] & 0x07)

	cmd.Properties2.LowPressureThresholdScale = (payload[i] & 0x18) >> 3

	cmd.Properties2.LowPressureThresholdPrecision = (payload[i] & 0xE0) >> 5

	i += 1

	if len(payload) <= i {
		return nil // field is optional
	}

	{
		length := (payload[3+2]) & 0x07
		cmd.LowPressureThresholdValue = payload[i : i+int(length)]
		i += int(length)
	}

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.SensorPolarity = payload[i:]

	return nil
}

func (cmd *SystemConfigReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.MasterValveDelay)

	{
		var val byte

		val |= (cmd.Properties1.HighPressureThresholdSize) & byte(0x07)

		val |= (cmd.Properties1.HighPressureThresholdScale << byte(3)) & byte(0x18)

		val |= (cmd.Properties1.HighPressureThresholdPrecision << byte(5)) & byte(0xE0)

		payload = append(payload, val)
	}

	if cmd.HighPressureThresholdValue != nil && len(cmd.HighPressureThresholdValue) > 0 {
		payload = append(payload, cmd.HighPressureThresholdValue...)
	}

	{
		var val byte

		val |= (cmd.Properties2.LowPressureThresholdSize) & byte(0x07)

		val |= (cmd.Properties2.LowPressureThresholdScale << byte(3)) & byte(0x18)

		val |= (cmd.Properties2.LowPressureThresholdPrecision << byte(5)) & byte(0xE0)

		payload = append(payload, val)
	}

	if cmd.LowPressureThresholdValue != nil && len(cmd.LowPressureThresholdValue) > 0 {
		payload = append(payload, cmd.LowPressureThresholdValue...)
	}

	payload = append(payload, cmd.SensorPolarity...)

	return
}
