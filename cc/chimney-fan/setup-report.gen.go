// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package chimneyfan

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandSetupReport cc.CommandID = 0x1B

func init() {
	gob.Register(SetupReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x2A),
		Command:      cc.CommandID(0x1B),
		Version:      1,
	}, NewSetupReport)
}

func NewSetupReport() cc.Command {
	return &SetupReport{}
}

// <no value>
type SetupReport struct {
	Mode byte

	BoostTime byte

	StopTime byte

	MinSpeed byte

	Properties1 struct {
		Size1 byte

		Scale1 byte

		Precision1 byte
	}

	StartTemperature []byte

	Properties2 struct {
		Size2 byte

		Scale2 byte

		Precision2 byte
	}

	StopTemperature []byte

	Properties3 struct {
		Size3 byte

		Scale3 byte

		Precision3 byte
	}

	AlarmTemperatureValue []byte
}

func (cmd SetupReport) CommandClassID() cc.CommandClassID {
	return 0x2A
}

func (cmd SetupReport) CommandID() cc.CommandID {
	return CommandSetupReport
}

func (cmd SetupReport) CommandIDString() string {
	return "CHIMNEY_FAN_SETUP_REPORT"
}

func (cmd *SetupReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Mode = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.BoostTime = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.StopTime = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.MinSpeed = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.Size1 = (payload[i] & 0x07)

	cmd.Properties1.Scale1 = (payload[i] & 0x18) >> 3

	cmd.Properties1.Precision1 = (payload[i] & 0xE0) >> 5

	i += 1

	if len(payload) <= i {
		return nil // field is optional
	}

	{
		length := (payload[4+2]) & 0x07
		cmd.StartTemperature = payload[i : i+int(length)]
		i += int(length)
	}

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.Properties2.Size2 = (payload[i] & 0x07)

	cmd.Properties2.Scale2 = (payload[i] & 0x18) >> 3

	cmd.Properties2.Precision2 = (payload[i] & 0xE0) >> 5

	i += 1

	if len(payload) <= i {
		return nil // field is optional
	}

	{
		length := (payload[6+2]) & 0x07
		cmd.StopTemperature = payload[i : i+int(length)]
		i += int(length)
	}

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.Properties3.Size3 = (payload[i] & 0x07)

	cmd.Properties3.Scale3 = (payload[i] & 0x18) >> 3

	cmd.Properties3.Precision3 = (payload[i] & 0xE0) >> 5

	i += 1

	if len(payload) <= i {
		return nil // field is optional
	}

	{
		length := (payload[8+2]) & 0x07
		cmd.AlarmTemperatureValue = payload[i : i+int(length)]
		i += int(length)
	}

	return nil
}

func (cmd *SetupReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.Mode)

	payload = append(payload, cmd.BoostTime)

	payload = append(payload, cmd.StopTime)

	payload = append(payload, cmd.MinSpeed)

	{
		var val byte

		val |= (cmd.Properties1.Size1) & byte(0x07)

		val |= (cmd.Properties1.Scale1 << byte(3)) & byte(0x18)

		val |= (cmd.Properties1.Precision1 << byte(5)) & byte(0xE0)

		payload = append(payload, val)
	}

	if cmd.StartTemperature != nil && len(cmd.StartTemperature) > 0 {
		payload = append(payload, cmd.StartTemperature...)
	}

	{
		var val byte

		val |= (cmd.Properties2.Size2) & byte(0x07)

		val |= (cmd.Properties2.Scale2 << byte(3)) & byte(0x18)

		val |= (cmd.Properties2.Precision2 << byte(5)) & byte(0xE0)

		payload = append(payload, val)
	}

	if cmd.StopTemperature != nil && len(cmd.StopTemperature) > 0 {
		payload = append(payload, cmd.StopTemperature...)
	}

	{
		var val byte

		val |= (cmd.Properties3.Size3) & byte(0x07)

		val |= (cmd.Properties3.Scale3 << byte(3)) & byte(0x18)

		val |= (cmd.Properties3.Precision3 << byte(5)) & byte(0xE0)

		payload = append(payload, val)
	}

	if cmd.AlarmTemperatureValue != nil && len(cmd.AlarmTemperatureValue) > 0 {
		payload = append(payload, cmd.AlarmTemperatureValue...)
	}

	return
}
