// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package soundswitch

import (
	"encoding/binary"
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandToneInfoReport cc.CommandID = 0x04

func init() {
	gob.Register(ToneInfoReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x79),
		Command:      cc.CommandID(0x04),
		Version:      1,
	}, NewToneInfoReport)
}

func NewToneInfoReport() cc.Command {
	return &ToneInfoReport{}
}

// <no value>
type ToneInfoReport struct {
	ToneIdentifier byte

	ToneDuration uint16

	NameLength byte

	Name []byte
}

func (cmd ToneInfoReport) CommandClassID() cc.CommandClassID {
	return 0x79
}

func (cmd ToneInfoReport) CommandID() cc.CommandID {
	return CommandToneInfoReport
}

func (cmd ToneInfoReport) CommandIDString() string {
	return "SOUND_SWITCH_TONE_INFO_REPORT"
}

func (cmd *ToneInfoReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.ToneIdentifier = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.ToneDuration = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NameLength = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	{
		length := (payload[2+2]) & 0xFF
		cmd.Name = payload[i : i+int(length)]
		i += int(length)
	}

	return nil
}

func (cmd *ToneInfoReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.ToneIdentifier)

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.ToneDuration)
		payload = append(payload, buf...)
	}

	payload = append(payload, cmd.NameLength)

	if cmd.Name != nil && len(cmd.Name) > 0 {
		payload = append(payload, cmd.Name...)
	}

	return
}
