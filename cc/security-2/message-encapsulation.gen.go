// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package security2

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandMessageEncapsulation cc.CommandID = 0x03

func init() {
	gob.Register(MessageEncapsulation{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x9F),
		Command:      cc.CommandID(0x03),
		Version:      1,
	}, NewMessageEncapsulation)
}

func NewMessageEncapsulation() cc.Command {
	return &MessageEncapsulation{}
}

// <no value>
type MessageEncapsulation struct {
	SequenceNumber byte

	Properties1 struct {
		Extension bool

		EncryptedExtension bool
	}

	CcmCiphertextObject []byte

	Vg1 []MessageEncapsulationVg1
}

type MessageEncapsulationVg1 struct {
	ExtensionLength byte

	Properties1 struct {
		Type byte

		Critical bool

		MoreToFollow bool
	}

	Extension []byte
}

func (cmd MessageEncapsulation) CommandClassID() cc.CommandClassID {
	return 0x9F
}

func (cmd MessageEncapsulation) CommandID() cc.CommandID {
	return CommandMessageEncapsulation
}

func (cmd MessageEncapsulation) CommandIDString() string {
	return "SECURITY_2_MESSAGE_ENCAPSULATION"
}

func (cmd *MessageEncapsulation) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.SequenceNumber = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.Extension = payload[i]&0x01 == 0x01

	cmd.Properties1.EncryptedExtension = payload[i]&0x02 == 0x02

	i += 1

	for i < int(cmd.SequenceNumber) {

		vg1 := MessageEncapsulationVg1{}

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		extensionLength := payload[i]
		i++

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		vg1.Properties1.Type = (payload[i] & 0x3F)

		vg1.Properties1.Critical = payload[i]&0x40 == 0x40

		vg1.Properties1.MoreToFollow = payload[i]&0x80 == 0x80

		i += 1

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		length := (payload[0+2]) & 0xFF
		extension := payload[i : i+int(length)]
		i += int(length)

		vg1.ExtensionLength = extensionLength

		// struct byte fields are assigned to the variant group when computed

		vg1.Extension = extension

		cmd.Vg1 = append(cmd.Vg1, vg1)
	}

	if len(payload) <= i {
		return nil
	}

	cmd.CcmCiphertextObject = payload[i:]

	return nil
}

func (cmd *MessageEncapsulation) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.SequenceNumber)

	{
		var val byte

		if cmd.Properties1.Extension {
			val |= byte(0x01) // flip bits on
		} else {
			val &= ^byte(0x01) // flip bits off
		}

		if cmd.Properties1.EncryptedExtension {
			val |= byte(0x02) // flip bits on
		} else {
			val &= ^byte(0x02) // flip bits off
		}

		payload = append(payload, val)
	}

	for _, vg := range cmd.Vg1 {

		payload = append(payload, vg.ExtensionLength)

		{
			var val byte

			val |= (vg.Properties1.Type) & byte(0x3F)

			if vg.Properties1.Critical {
				val |= byte(0x40) // flip bits on
			} else {
				val &= ^byte(0x40) // flip bits off
			}

			if vg.Properties1.MoreToFollow {
				val |= byte(0x80) // flip bits on
			} else {
				val &= ^byte(0x80) // flip bits off
			}

			payload = append(payload, val)
		}

		if vg.Extension != nil && len(vg.Extension) > 0 {
			payload = append(payload, vg.Extension...)
		}

	}

	payload = append(payload, cmd.CcmCiphertextObject...)

	return
}
