// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package ratetblmonitor

import (
	"encoding/binary"
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandRateTblReport cc.CommandID = 0x04

func init() {
	gob.Register(RateTblReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x49),
		Command:      cc.CommandID(0x04),
		Version:      1,
	}, NewRateTblReport)
}

func NewRateTblReport() cc.Command {
	return &RateTblReport{}
}

// <no value>
type RateTblReport struct {
	RateParameterSetId byte

	Properties1 struct {
		NumberOfRateChar byte

		RateType byte
	}

	RateCharacter []byte

	StartHourLocalTime byte

	StartMinuteLocalTime byte

	DurationMinute uint16

	Properties2 struct {
		ConsumptionScale byte

		ConsumptionPrecision byte
	}

	MinConsumptionValue uint32

	MaxConsumptionValue uint32

	Properties3 struct {
		MaxDemandScale byte

		MaxDemandPrecision byte
	}

	MaxDemandValue uint32

	DcpRateId byte
}

func (cmd RateTblReport) CommandClassID() cc.CommandClassID {
	return 0x49
}

func (cmd RateTblReport) CommandID() cc.CommandID {
	return CommandRateTblReport
}

func (cmd RateTblReport) CommandIDString() string {
	return "RATE_TBL_REPORT"
}

func (cmd *RateTblReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.RateParameterSetId = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.NumberOfRateChar = (payload[i] & 0x1F)

	cmd.Properties1.RateType = (payload[i] & 0x60) >> 5

	i += 1

	if len(payload) <= i {
		return nil // field is optional
	}

	{
		length := (payload[1+2]) & 0x1F
		cmd.RateCharacter = payload[i : i+int(length)]
		i += int(length)
	}

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.StartHourLocalTime = payload[i]
	i++

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.StartMinuteLocalTime = payload[i]
	i++

	cmd.DurationMinute = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.Properties2.ConsumptionScale = (payload[i] & 0x1F)

	cmd.Properties2.ConsumptionPrecision = (payload[i] & 0xE0) >> 5

	i += 1

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.MinConsumptionValue = binary.BigEndian.Uint32(payload[i : i+4])
	i += 4

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.MaxConsumptionValue = binary.BigEndian.Uint32(payload[i : i+4])
	i += 4

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.Properties3.MaxDemandScale = (payload[i] & 0x1F)

	cmd.Properties3.MaxDemandPrecision = (payload[i] & 0xE0) >> 5

	i += 1

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.MaxDemandValue = binary.BigEndian.Uint32(payload[i : i+4])
	i += 4

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.DcpRateId = payload[i]
	i++

	return nil
}

func (cmd *RateTblReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.RateParameterSetId)

	{
		var val byte

		val |= (cmd.Properties1.NumberOfRateChar) & byte(0x1F)

		val |= (cmd.Properties1.RateType << byte(5)) & byte(0x60)

		payload = append(payload, val)
	}

	if cmd.RateCharacter != nil && len(cmd.RateCharacter) > 0 {
		payload = append(payload, cmd.RateCharacter...)
	}

	payload = append(payload, cmd.StartHourLocalTime)

	payload = append(payload, cmd.StartMinuteLocalTime)

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.DurationMinute)
		payload = append(payload, buf...)
	}

	{
		var val byte

		val |= (cmd.Properties2.ConsumptionScale) & byte(0x1F)

		val |= (cmd.Properties2.ConsumptionPrecision << byte(5)) & byte(0xE0)

		payload = append(payload, val)
	}

	{
		buf := make([]byte, 4)
		binary.BigEndian.PutUint32(buf, cmd.MinConsumptionValue)
		payload = append(payload, buf...)
	}

	{
		buf := make([]byte, 4)
		binary.BigEndian.PutUint32(buf, cmd.MaxConsumptionValue)
		payload = append(payload, buf...)
	}

	{
		var val byte

		val |= (cmd.Properties3.MaxDemandScale) & byte(0x1F)

		val |= (cmd.Properties3.MaxDemandPrecision << byte(5)) & byte(0xE0)

		payload = append(payload, val)
	}

	{
		buf := make([]byte, 4)
		binary.BigEndian.PutUint32(buf, cmd.MaxDemandValue)
		payload = append(payload, buf...)
	}

	payload = append(payload, cmd.DcpRateId)

	return
}
