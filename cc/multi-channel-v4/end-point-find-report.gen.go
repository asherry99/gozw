// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package multichannelv4

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandEndPointFindReport cc.CommandID = 0x0C

func init() {
	gob.Register(EndPointFindReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x60),
		Command:      cc.CommandID(0x0C),
		Version:      4,
	}, NewEndPointFindReport)
}

func NewEndPointFindReport() cc.Command {
	return &EndPointFindReport{}
}

// <no value>
type EndPointFindReport struct {
	ReportsToFollow byte

	GenericDeviceClass byte

	SpecificDeviceClass byte

	Vg []EndPointFindReportVg
}

type EndPointFindReportVg struct {
	Properties1 struct {
		EndPoint byte
	}
}

func (cmd EndPointFindReport) CommandClassID() cc.CommandClassID {
	return 0x60
}

func (cmd EndPointFindReport) CommandID() cc.CommandID {
	return CommandEndPointFindReport
}

func (cmd EndPointFindReport) CommandIDString() string {
	return "MULTI_CHANNEL_END_POINT_FIND_REPORT"
}

func (cmd *EndPointFindReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.ReportsToFollow = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.GenericDeviceClass = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.SpecificDeviceClass = payload[i]
	i++

	for i < len(payload) {

		vg := EndPointFindReportVg{}

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		vg.Properties1.EndPoint = (payload[i] & 0x7F)

		i += 1

		// struct byte fields are assigned to the variant group when computed

		cmd.Vg = append(cmd.Vg, vg)
	}

	return nil
}

func (cmd *EndPointFindReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.ReportsToFollow)

	payload = append(payload, cmd.GenericDeviceClass)

	payload = append(payload, cmd.SpecificDeviceClass)

	for _, vg := range cmd.Vg {

		{
			var val byte

			val |= (vg.Properties1.EndPoint) & byte(0x7F)

			payload = append(payload, val)
		}

	}

	return
}
