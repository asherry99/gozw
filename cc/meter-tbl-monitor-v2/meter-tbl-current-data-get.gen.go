// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package metertblmonitorv2

import (
	"encoding/binary"
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandMeterTblCurrentDataGet cc.CommandID = 0x0C

func init() {
	gob.Register(MeterTblCurrentDataGet{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x3D),
		Command:      cc.CommandID(0x0C),
		Version:      2,
	}, NewMeterTblCurrentDataGet)
}

func NewMeterTblCurrentDataGet() cc.Command {
	return &MeterTblCurrentDataGet{}
}

// <no value>
type MeterTblCurrentDataGet struct {
	DatasetRequested uint32
}

func (cmd MeterTblCurrentDataGet) CommandClassID() cc.CommandClassID {
	return 0x3D
}

func (cmd MeterTblCurrentDataGet) CommandID() cc.CommandID {
	return CommandMeterTblCurrentDataGet
}

func (cmd MeterTblCurrentDataGet) CommandIDString() string {
	return "METER_TBL_CURRENT_DATA_GET"
}

func (cmd *MeterTblCurrentDataGet) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.DatasetRequested = binary.BigEndian.Uint32(payload[i : i+3])
	i += 3

	return nil
}

func (cmd *MeterTblCurrentDataGet) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	{
		buf := make([]byte, 4)
		binary.BigEndian.PutUint32(buf, cmd.DatasetRequested)
		if buf[0] != 0 {
			return nil, errors.New("BIT_24 value overflow")
		}
		payload = append(payload, buf[1:4]...)
	}

	return
}
