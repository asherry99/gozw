// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package irrigation

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandSystemStatusReport cc.CommandID = 0x04

func init() {
	gob.Register(SystemStatusReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x6B),
		Command:      cc.CommandID(0x04),
		Version:      1,
	}, NewSystemStatusReport)
}

func NewSystemStatusReport() cc.Command {
	return &SystemStatusReport{}
}

// <no value>
type SystemStatusReport struct {
	SystemVoltage byte

	SensorStatus byte

	Properties1 struct {
		FlowSize byte

		FlowScale byte

		FlowPrecision byte
	}

	FlowValue []byte

	Properties2 struct {
		PressureSize byte

		PressureScale byte

		PressurePrecision byte
	}

	PressureValue []byte

	ShutoffDuration byte

	SystemErrorStatus []byte

	Properties3 struct {
		MasterValve bool
	}

	ValveId byte
}

func (cmd SystemStatusReport) CommandClassID() cc.CommandClassID {
	return 0x6B
}

func (cmd SystemStatusReport) CommandID() cc.CommandID {
	return CommandSystemStatusReport
}

func (cmd SystemStatusReport) CommandIDString() string {
	return "IRRIGATION_SYSTEM_STATUS_REPORT"
}

func (cmd *SystemStatusReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.SystemVoltage = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.SensorStatus = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.FlowSize = (payload[i] & 0x07)

	cmd.Properties1.FlowScale = (payload[i] & 0x18) >> 3

	cmd.Properties1.FlowPrecision = (payload[i] & 0xE0) >> 5

	i += 1

	if len(payload) <= i {
		return nil // field is optional
	}

	{
		length := (payload[2+2]) & 0x07
		cmd.FlowValue = payload[i : i+int(length)]
		i += int(length)
	}

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.Properties2.PressureSize = (payload[i] & 0x07)

	cmd.Properties2.PressureScale = (payload[i] & 0x18) >> 3

	cmd.Properties2.PressurePrecision = (payload[i] & 0xE0) >> 5

	i += 1

	if len(payload) <= i {
		return nil // field is optional
	}

	{
		length := (payload[4+2]) & 0x07
		cmd.PressureValue = payload[i : i+int(length)]
		i += int(length)
	}

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.ShutoffDuration = payload[i]
	i++

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.SystemErrorStatus = payload[i:]

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.Properties3.MasterValve = payload[i]&0x01 == 0x01

	i += 1

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.ValveId = payload[i]
	i++

	return nil
}

func (cmd *SystemStatusReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.SystemVoltage)

	payload = append(payload, cmd.SensorStatus)

	{
		var val byte

		val |= (cmd.Properties1.FlowSize) & byte(0x07)

		val |= (cmd.Properties1.FlowScale << byte(3)) & byte(0x18)

		val |= (cmd.Properties1.FlowPrecision << byte(5)) & byte(0xE0)

		payload = append(payload, val)
	}

	if cmd.FlowValue != nil && len(cmd.FlowValue) > 0 {
		payload = append(payload, cmd.FlowValue...)
	}

	{
		var val byte

		val |= (cmd.Properties2.PressureSize) & byte(0x07)

		val |= (cmd.Properties2.PressureScale << byte(3)) & byte(0x18)

		val |= (cmd.Properties2.PressurePrecision << byte(5)) & byte(0xE0)

		payload = append(payload, val)
	}

	if cmd.PressureValue != nil && len(cmd.PressureValue) > 0 {
		payload = append(payload, cmd.PressureValue...)
	}

	payload = append(payload, cmd.ShutoffDuration)

	payload = append(payload, cmd.SystemErrorStatus...)

	{
		var val byte

		if cmd.Properties3.MasterValve {
			val |= byte(0x01) // flip bits on
		} else {
			val &= ^byte(0x01) // flip bits off
		}

		payload = append(payload, val)
	}

	payload = append(payload, cmd.ValveId)

	return
}
