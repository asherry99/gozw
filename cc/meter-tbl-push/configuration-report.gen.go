// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package metertblpush

import (
	"encoding/binary"
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandConfigurationReport cc.CommandID = 0x03

func init() {
	gob.Register(ConfigurationReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x3E),
		Command:      cc.CommandID(0x03),
		Version:      1,
	}, NewConfigurationReport)
}

func NewConfigurationReport() cc.Command {
	return &ConfigurationReport{}
}

// <no value>
type ConfigurationReport struct {
	Properties1 struct {
		OperatingStatusPushMode byte

		Ps bool
	}

	PushDataset uint32

	IntervalMonths byte

	IntervalDays byte

	IntervalHours byte

	IntervalMinutes byte

	PushNodeId byte
}

func (cmd ConfigurationReport) CommandClassID() cc.CommandClassID {
	return 0x3E
}

func (cmd ConfigurationReport) CommandID() cc.CommandID {
	return CommandConfigurationReport
}

func (cmd ConfigurationReport) CommandIDString() string {
	return "METER_TBL_PUSH_CONFIGURATION_REPORT"
}

func (cmd *ConfigurationReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.OperatingStatusPushMode = (payload[i] & 0x0F)

	cmd.Properties1.Ps = payload[i]&0x10 == 0x10

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.PushDataset = binary.BigEndian.Uint32(payload[i : i+3])
	i += 3

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.IntervalMonths = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.IntervalDays = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.IntervalHours = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.IntervalMinutes = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.PushNodeId = payload[i]
	i++

	return nil
}

func (cmd *ConfigurationReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	{
		var val byte

		val |= (cmd.Properties1.OperatingStatusPushMode) & byte(0x0F)

		if cmd.Properties1.Ps {
			val |= byte(0x10) // flip bits on
		} else {
			val &= ^byte(0x10) // flip bits off
		}

		payload = append(payload, val)
	}

	{
		buf := make([]byte, 4)
		binary.BigEndian.PutUint32(buf, cmd.PushDataset)
		if buf[0] != 0 {
			return nil, errors.New("BIT_24 value overflow")
		}
		payload = append(payload, buf[1:4]...)
	}

	payload = append(payload, cmd.IntervalMonths)

	payload = append(payload, cmd.IntervalDays)

	payload = append(payload, cmd.IntervalHours)

	payload = append(payload, cmd.IntervalMinutes)

	payload = append(payload, cmd.PushNodeId)

	return
}
