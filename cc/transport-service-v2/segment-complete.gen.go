// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package transportservicev2

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandSegmentComplete cc.CommandID = 0xE8

func init() {
	gob.Register(SegmentComplete{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x55),
		Command:      cc.CommandID(0xE8),
		Version:      2,
	}, NewSegmentComplete)
}

func NewSegmentComplete() cc.Command {
	return &SegmentComplete{}
}

// <no value>
type SegmentComplete struct {
	Properties1 struct {
	}

	Properties2 struct {
		SessionId byte
	}
}

func (cmd SegmentComplete) CommandClassID() cc.CommandClassID {
	return 0x55
}

func (cmd SegmentComplete) CommandID() cc.CommandID {
	return CommandSegmentComplete
}

func (cmd SegmentComplete) CommandIDString() string {
	return "COMMAND_SEGMENT_COMPLETE"
}

func (cmd *SegmentComplete) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties2.SessionId = (payload[i] & 0xF0) >> 4

	i += 1

	return nil
}

func (cmd *SegmentComplete) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	{
		var val byte

		payload = append(payload, val)
	}

	{
		var val byte

		val |= (cmd.Properties2.SessionId << byte(4)) & byte(0xF0)

		payload = append(payload, val)
	}

	return
}
