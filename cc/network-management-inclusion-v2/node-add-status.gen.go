// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package networkmanagementinclusionv2

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandNodeAddStatus cc.CommandID = 0x02

func init() {
	gob.Register(NodeAddStatus{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x34),
		Command:      cc.CommandID(0x02),
		Version:      2,
	}, NewNodeAddStatus)
}

func NewNodeAddStatus() cc.Command {
	return &NodeAddStatus{}
}

// <no value>
type NodeAddStatus struct {
	SeqNo byte

	Status byte

	NewNodeId byte

	NodeInfoLength byte

	Properties1 struct {
		ZWaveProtocolSpecificPart1 byte

		Listening bool
	}

	Properties2 struct {
		ZWaveProtocolSpecificPart2 byte

		Opt bool
	}

	BasicDeviceClass byte

	GenericDeviceClass byte

	SpecificDeviceClass byte

	CommandClass []byte

	GrantedKeys byte

	KexFailType byte
}

func (cmd NodeAddStatus) CommandClassID() cc.CommandClassID {
	return 0x34
}

func (cmd NodeAddStatus) CommandID() cc.CommandID {
	return CommandNodeAddStatus
}

func (cmd NodeAddStatus) CommandIDString() string {
	return "NODE_ADD_STATUS"
}

func (cmd *NodeAddStatus) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.SeqNo = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Status = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	i++ // skipping over reserved bit

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NewNodeId = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NodeInfoLength = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.ZWaveProtocolSpecificPart1 = (payload[i] & 0x7F)

	cmd.Properties1.Listening = payload[i]&0x80 == 0x80

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties2.ZWaveProtocolSpecificPart2 = (payload[i] & 0x7F)

	cmd.Properties2.Opt = payload[i]&0x80 == 0x80

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.BasicDeviceClass = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.GenericDeviceClass = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.SpecificDeviceClass = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	{
		length := (payload[4+2]) & 0xFF
		cmd.CommandClass = payload[i : i+int(length)]
		i += int(length)
	}

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.GrantedKeys = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.KexFailType = payload[i]
	i++

	return nil
}

func (cmd *NodeAddStatus) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.SeqNo)

	payload = append(payload, cmd.Status)

	payload = append(payload, cmd.NewNodeId)

	payload = append(payload, cmd.NodeInfoLength)

	{
		var val byte

		val |= (cmd.Properties1.ZWaveProtocolSpecificPart1) & byte(0x7F)

		if cmd.Properties1.Listening {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	{
		var val byte

		val |= (cmd.Properties2.ZWaveProtocolSpecificPart2) & byte(0x7F)

		if cmd.Properties2.Opt {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	payload = append(payload, cmd.BasicDeviceClass)

	payload = append(payload, cmd.GenericDeviceClass)

	payload = append(payload, cmd.SpecificDeviceClass)

	if cmd.CommandClass != nil && len(cmd.CommandClass) > 0 {
		payload = append(payload, cmd.CommandClass...)
	}

	payload = append(payload, cmd.GrantedKeys)

	payload = append(payload, cmd.KexFailType)

	return
}
