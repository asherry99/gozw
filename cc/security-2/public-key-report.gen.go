// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package security2

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandPublicKeyReport cc.CommandID = 0x08

func init() {
	gob.Register(PublicKeyReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x9F),
		Command:      cc.CommandID(0x08),
		Version:      1,
	}, NewPublicKeyReport)
}

func NewPublicKeyReport() cc.Command {
	return &PublicKeyReport{}
}

// <no value>
type PublicKeyReport struct {
	Properties1 struct {
		IncludingNode bool
	}

	EcdhPublicKey []byte
}

func (cmd PublicKeyReport) CommandClassID() cc.CommandClassID {
	return 0x9F
}

func (cmd PublicKeyReport) CommandID() cc.CommandID {
	return CommandPublicKeyReport
}

func (cmd PublicKeyReport) CommandIDString() string {
	return "PUBLIC_KEY_REPORT"
}

func (cmd *PublicKeyReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.IncludingNode = payload[i]&0x01 == 0x01

	i += 1

	if len(payload) <= i {
		return nil
	}

	cmd.EcdhPublicKey = payload[i:]

	return nil
}

func (cmd *PublicKeyReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	{
		var val byte

		if cmd.Properties1.IncludingNode {
			val |= byte(0x01) // flip bits on
		} else {
			val &= ^byte(0x01) // flip bits off
		}

		payload = append(payload, val)
	}

	payload = append(payload, cmd.EcdhPublicKey...)

	return
}
