// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package firmwareupdatemdv4

import (
	"encoding/binary"
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandFirmwareUpdateActivationStatusReport cc.CommandID = 0x09

func init() {
	gob.Register(FirmwareUpdateActivationStatusReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x7A),
		Command:      cc.CommandID(0x09),
		Version:      4,
	}, NewFirmwareUpdateActivationStatusReport)
}

func NewFirmwareUpdateActivationStatusReport() cc.Command {
	return &FirmwareUpdateActivationStatusReport{}
}

// <no value>
type FirmwareUpdateActivationStatusReport struct {
	ManufacturerId uint16

	FirmwareId uint16

	Checksum uint16

	FirmwareTarget byte

	FirmwareUpdateStatus byte
}

func (cmd FirmwareUpdateActivationStatusReport) CommandClassID() cc.CommandClassID {
	return 0x7A
}

func (cmd FirmwareUpdateActivationStatusReport) CommandID() cc.CommandID {
	return CommandFirmwareUpdateActivationStatusReport
}

func (cmd FirmwareUpdateActivationStatusReport) CommandIDString() string {
	return "FIRMWARE_UPDATE_ACTIVATION_STATUS_REPORT"
}

func (cmd *FirmwareUpdateActivationStatusReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.ManufacturerId = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.FirmwareId = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Checksum = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.FirmwareTarget = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.FirmwareUpdateStatus = payload[i]
	i++

	return nil
}

func (cmd *FirmwareUpdateActivationStatusReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.ManufacturerId)
		payload = append(payload, buf...)
	}

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.FirmwareId)
		payload = append(payload, buf...)
	}

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.Checksum)
		payload = append(payload, buf...)
	}

	payload = append(payload, cmd.FirmwareTarget)

	payload = append(payload, cmd.FirmwareUpdateStatus)

	return
}
