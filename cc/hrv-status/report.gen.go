// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package hrvstatus

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandReport cc.CommandID = 0x02

func init() {
	gob.Register(Report{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x37),
		Command:      cc.CommandID(0x02),
		Version:      1,
	}, NewReport)
}

func NewReport() cc.Command {
	return &Report{}
}

// <no value>
type Report struct {
	StatusParameter byte

	Properties1 struct {
		Size byte

		Scale byte

		Precision byte
	}

	Value []byte
}

func (cmd Report) CommandClassID() cc.CommandClassID {
	return 0x37
}

func (cmd Report) CommandID() cc.CommandID {
	return CommandReport
}

func (cmd Report) CommandIDString() string {
	return "HRV_STATUS_REPORT"
}

func (cmd *Report) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.StatusParameter = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.Size = (payload[i] & 0x07)

	cmd.Properties1.Scale = (payload[i] & 0x18) >> 3

	cmd.Properties1.Precision = (payload[i] & 0xE0) >> 5

	i += 1

	if len(payload) <= i {
		return nil
	}

	cmd.Value = payload[i:]

	return nil
}

func (cmd *Report) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.StatusParameter)

	{
		var val byte

		val |= (cmd.Properties1.Size) & byte(0x07)

		val |= (cmd.Properties1.Scale << byte(3)) & byte(0x18)

		val |= (cmd.Properties1.Precision << byte(5)) & byte(0xE0)

		payload = append(payload, val)
	}

	payload = append(payload, cmd.Value...)

	return
}
