// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package multiinstanceassociation

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandSet cc.CommandID = 0x01

func init() {
	gob.Register(Set{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x8E),
		Command:      cc.CommandID(0x01),
		Version:      1,
	}, NewSet)
}

func NewSet() cc.Command {
	return &Set{}
}

// <no value>
type Set struct {
	GroupingIdentifier byte

	NodeId []byte

	Vg []SetVg
}

type SetVg struct {
	MultiInstanceNodeId byte

	Instance byte
}

func (cmd Set) CommandClassID() cc.CommandClassID {
	return 0x8E
}

func (cmd Set) CommandID() cc.CommandID {
	return CommandSet
}

func (cmd Set) CommandIDString() string {
	return "MULTI_INSTANCE_ASSOCIATION_SET"
}

func (cmd *Set) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.GroupingIdentifier = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	{
		fieldStart := i
		for ; i < len(payload) && payload[i] != 0x00; i++ {
		}
		cmd.NodeId = payload[fieldStart:i]
	}

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	i += 1 // skipping MARKER
	if len(payload) <= i {
		return nil
	}

	for i < len(payload) {

		vg := SetVg{}

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		multiInstanceNodeId := payload[i]
		i++

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		instance := payload[i]
		i++

		vg.MultiInstanceNodeId = multiInstanceNodeId

		vg.Instance = instance

		cmd.Vg = append(cmd.Vg, vg)
	}

	return nil
}

func (cmd *Set) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.GroupingIdentifier)

	{
		if cmd.NodeId != nil && len(cmd.NodeId) > 0 {
			payload = append(payload, cmd.NodeId...)
		}
		payload = append(payload, 0x00)
	}

	payload = append(payload, 0x00) // marker

	for _, vg := range cmd.Vg {

		payload = append(payload, vg.MultiInstanceNodeId)

		payload = append(payload, vg.Instance)

	}

	return
}
