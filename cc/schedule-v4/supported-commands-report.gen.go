// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package schedulev4

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandSupportedCommandsReport cc.CommandID = 0x0B

func init() {
	gob.Register(SupportedCommandsReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x53),
		Command:      cc.CommandID(0x0B),
		Version:      4,
	}, NewSupportedCommandsReport)
}

func NewSupportedCommandsReport() cc.Command {
	return &SupportedCommandsReport{}
}

// <no value>
type SupportedCommandsReport struct {
	ScheduleIdBlock byte

	CommandClassListLength byte

	Vg1 []SupportedCommandsReportVg1
}

type SupportedCommandsReportVg1 struct {
	CommandClass byte

	SupportedCommandListLength byte

	SupportedCommand []byte
}

func (cmd SupportedCommandsReport) CommandClassID() cc.CommandClassID {
	return 0x53
}

func (cmd SupportedCommandsReport) CommandID() cc.CommandID {
	return CommandSupportedCommandsReport
}

func (cmd SupportedCommandsReport) CommandIDString() string {
	return "SCHEDULE_SUPPORTED_COMMANDS_REPORT"
}

func (cmd *SupportedCommandsReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.ScheduleIdBlock = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.CommandClassListLength = payload[i]
	i++

	for i < len(payload) {

		vg1 := SupportedCommandsReportVg1{}

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		commandClass := payload[i]
		i++

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		supportedCommandListLength := payload[i]
		i++

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		length := (payload[1+2]) & 0xFF
		supportedCommand := payload[i : i+int(length)]
		i += int(length)

		vg1.CommandClass = commandClass

		vg1.SupportedCommandListLength = supportedCommandListLength

		vg1.SupportedCommand = supportedCommand

		cmd.Vg1 = append(cmd.Vg1, vg1)
	}

	return nil
}

func (cmd *SupportedCommandsReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.ScheduleIdBlock)

	payload = append(payload, cmd.CommandClassListLength)

	for _, vg := range cmd.Vg1 {

		payload = append(payload, vg.CommandClass)

		payload = append(payload, vg.SupportedCommandListLength)

		if vg.SupportedCommand != nil && len(vg.SupportedCommand) > 0 {
			payload = append(payload, vg.SupportedCommand...)
		}

	}

	return
}
