// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package networkmanagementproxyv2

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandNmMultiChannelAggregatedMembersReport cc.CommandID = 0x0A

func init() {
	gob.Register(NmMultiChannelAggregatedMembersReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x52),
		Command:      cc.CommandID(0x0A),
		Version:      2,
	}, NewNmMultiChannelAggregatedMembersReport)
}

func NewNmMultiChannelAggregatedMembersReport() cc.Command {
	return &NmMultiChannelAggregatedMembersReport{}
}

// <no value>
type NmMultiChannelAggregatedMembersReport struct {
	SeqNo byte

	Nodeid byte

	Properties1 struct {
		AggregatedEndPoint byte

		Res1 bool
	}

	NumberOfMembers byte

	Vg1 []NmMultiChannelAggregatedMembersReportVg1
}

type NmMultiChannelAggregatedMembersReportVg1 struct {
	Properties1 struct {
		MemberEndpoint byte

		Res2 bool
	}
}

func (cmd NmMultiChannelAggregatedMembersReport) CommandClassID() cc.CommandClassID {
	return 0x52
}

func (cmd NmMultiChannelAggregatedMembersReport) CommandID() cc.CommandID {
	return CommandNmMultiChannelAggregatedMembersReport
}

func (cmd NmMultiChannelAggregatedMembersReport) CommandIDString() string {
	return "NM_MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT"
}

func (cmd *NmMultiChannelAggregatedMembersReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.SeqNo = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Nodeid = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.AggregatedEndPoint = (payload[i] & 0x7F)

	cmd.Properties1.Res1 = payload[i]&0x80 == 0x80

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NumberOfMembers = payload[i]
	i++

	for i < len(payload) {

		vg1 := NmMultiChannelAggregatedMembersReportVg1{}

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		vg1.Properties1.MemberEndpoint = (payload[i] & 0x7F)

		vg1.Properties1.Res2 = payload[i]&0x80 == 0x80

		i += 1

		// struct byte fields are assigned to the variant group when computed

		cmd.Vg1 = append(cmd.Vg1, vg1)
	}

	return nil
}

func (cmd *NmMultiChannelAggregatedMembersReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.SeqNo)

	payload = append(payload, cmd.Nodeid)

	{
		var val byte

		val |= (cmd.Properties1.AggregatedEndPoint) & byte(0x7F)

		if cmd.Properties1.Res1 {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	payload = append(payload, cmd.NumberOfMembers)

	for _, vg := range cmd.Vg1 {

		{
			var val byte

			val |= (vg.Properties1.MemberEndpoint) & byte(0x7F)

			if vg.Properties1.Res2 {
				val |= byte(0x80) // flip bits on
			} else {
				val &= ^byte(0x80) // flip bits off
			}

			payload = append(payload, val)
		}

	}

	return
}
