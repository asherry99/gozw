// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package chimneyfan

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandAlarmStatusReport cc.CommandID = 0x24

func init() {
	gob.Register(AlarmStatusReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x2A),
		Command:      cc.CommandID(0x24),
		Version:      1,
	}, NewAlarmStatusReport)
}

func NewAlarmStatusReport() cc.Command {
	return &AlarmStatusReport{}
}

// <no value>
type AlarmStatusReport struct {
	AlarmStatus struct {
		NotUsed byte

		Service bool

		ExternalAlarm bool

		SensorError bool

		AlarmTemperatureExceeded bool

		SpeedChangeEnable bool

		StartTemperatureExceeded bool
	}
}

func (cmd AlarmStatusReport) CommandClassID() cc.CommandClassID {
	return 0x2A
}

func (cmd AlarmStatusReport) CommandID() cc.CommandID {
	return CommandAlarmStatusReport
}

func (cmd AlarmStatusReport) CommandIDString() string {
	return "CHIMNEY_FAN_ALARM_STATUS_REPORT"
}

func (cmd *AlarmStatusReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.AlarmStatus.NotUsed = (payload[i] & 0x30) >> 4

	cmd.AlarmStatus.Service = payload[i]&0x01 == 0x01

	cmd.AlarmStatus.ExternalAlarm = payload[i]&0x02 == 0x02

	cmd.AlarmStatus.SensorError = payload[i]&0x04 == 0x04

	cmd.AlarmStatus.AlarmTemperatureExceeded = payload[i]&0x08 == 0x08

	cmd.AlarmStatus.SpeedChangeEnable = payload[i]&0x40 == 0x40

	cmd.AlarmStatus.StartTemperatureExceeded = payload[i]&0x80 == 0x80

	i += 1

	return nil
}

func (cmd *AlarmStatusReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	{
		var val byte

		val |= (cmd.AlarmStatus.NotUsed << byte(4)) & byte(0x30)

		if cmd.AlarmStatus.Service {
			val |= byte(0x01) // flip bits on
		} else {
			val &= ^byte(0x01) // flip bits off
		}

		if cmd.AlarmStatus.ExternalAlarm {
			val |= byte(0x02) // flip bits on
		} else {
			val &= ^byte(0x02) // flip bits off
		}

		if cmd.AlarmStatus.SensorError {
			val |= byte(0x04) // flip bits on
		} else {
			val &= ^byte(0x04) // flip bits off
		}

		if cmd.AlarmStatus.AlarmTemperatureExceeded {
			val |= byte(0x08) // flip bits on
		} else {
			val &= ^byte(0x08) // flip bits off
		}

		if cmd.AlarmStatus.SpeedChangeEnable {
			val |= byte(0x40) // flip bits on
		} else {
			val &= ^byte(0x40) // flip bits off
		}

		if cmd.AlarmStatus.StartTemperatureExceeded {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	return
}
