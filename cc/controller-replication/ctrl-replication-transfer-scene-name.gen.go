// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package controllerreplication

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandCtrlReplicationTransferSceneName cc.CommandID = 0x34

func init() {
	gob.Register(CtrlReplicationTransferSceneName{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x21),
		Command:      cc.CommandID(0x34),
		Version:      1,
	}, NewCtrlReplicationTransferSceneName)
}

func NewCtrlReplicationTransferSceneName() cc.Command {
	return &CtrlReplicationTransferSceneName{}
}

// <no value>
type CtrlReplicationTransferSceneName struct {
	SequenceNumber byte

	SceneId byte

	SceneName []byte
}

func (cmd CtrlReplicationTransferSceneName) CommandClassID() cc.CommandClassID {
	return 0x21
}

func (cmd CtrlReplicationTransferSceneName) CommandID() cc.CommandID {
	return CommandCtrlReplicationTransferSceneName
}

func (cmd CtrlReplicationTransferSceneName) CommandIDString() string {
	return "CTRL_REPLICATION_TRANSFER_SCENE_NAME"
}

func (cmd *CtrlReplicationTransferSceneName) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.SequenceNumber = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.SceneId = payload[i]
	i++

	if len(payload) <= i {
		return nil
	}

	cmd.SceneName = payload[i:]

	return nil
}

func (cmd *CtrlReplicationTransferSceneName) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.SequenceNumber)

	payload = append(payload, cmd.SceneId)

	payload = append(payload, cmd.SceneName...)

	return
}
