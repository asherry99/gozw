// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package multichannelv3

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandEndPointFind cc.CommandID = 0x0B

func init() {
	gob.Register(EndPointFind{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x60),
		Command:      cc.CommandID(0x0B),
		Version:      3,
	}, NewEndPointFind)
}

func NewEndPointFind() cc.Command {
	return &EndPointFind{}
}

// <no value>
type EndPointFind struct {
	GenericDeviceClass byte

	SpecificDeviceClass byte
}

func (cmd EndPointFind) CommandClassID() cc.CommandClassID {
	return 0x60
}

func (cmd EndPointFind) CommandID() cc.CommandID {
	return CommandEndPointFind
}

func (cmd EndPointFind) CommandIDString() string {
	return "MULTI_CHANNEL_END_POINT_FIND"
}

func (cmd *EndPointFind) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.GenericDeviceClass = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.SpecificDeviceClass = payload[i]
	i++

	return nil
}

func (cmd *EndPointFind) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.GenericDeviceClass)

	payload = append(payload, cmd.SpecificDeviceClass)

	return
}
