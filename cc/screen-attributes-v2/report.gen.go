// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package screenattributesv2

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandReport cc.CommandID = 0x02

func init() {
	gob.Register(Report{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x93),
		Command:      cc.CommandID(0x02),
		Version:      2,
	}, NewReport)
}

func NewReport() cc.Command {
	return &Report{}
}

// <no value>
type Report struct {
	Properties1 struct {
		NumberOfLines byte

		EscapeSequence bool
	}

	NumberOfCharactersPerLine byte

	SizeOfLineBuffer byte

	NumericalPresentationOfACharacter byte

	ScreenTimeout byte
}

func (cmd Report) CommandClassID() cc.CommandClassID {
	return 0x93
}

func (cmd Report) CommandID() cc.CommandID {
	return CommandReport
}

func (cmd Report) CommandIDString() string {
	return "SCREEN_ATTRIBUTES_REPORT"
}

func (cmd *Report) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.NumberOfLines = (payload[i] & 0x1F)

	cmd.Properties1.EscapeSequence = payload[i]&0x20 == 0x20

	i += 1

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.NumberOfCharactersPerLine = payload[i]
	i++

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.SizeOfLineBuffer = payload[i]
	i++

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.NumericalPresentationOfACharacter = payload[i]
	i++

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.ScreenTimeout = payload[i]
	i++

	return nil
}

func (cmd *Report) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	{
		var val byte

		val |= (cmd.Properties1.NumberOfLines) & byte(0x1F)

		if cmd.Properties1.EscapeSequence {
			val |= byte(0x20) // flip bits on
		} else {
			val &= ^byte(0x20) // flip bits off
		}

		payload = append(payload, val)
	}

	payload = append(payload, cmd.NumberOfCharactersPerLine)

	payload = append(payload, cmd.SizeOfLineBuffer)

	payload = append(payload, cmd.NumericalPresentationOfACharacter)

	payload = append(payload, cmd.ScreenTimeout)

	return
}
