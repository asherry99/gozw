// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package climatecontrolschedule

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandScheduleChangedReport cc.CommandID = 0x05

func init() {
	gob.Register(ScheduleChangedReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x46),
		Command:      cc.CommandID(0x05),
		Version:      1,
	}, NewScheduleChangedReport)
}

func NewScheduleChangedReport() cc.Command {
	return &ScheduleChangedReport{}
}

// <no value>
type ScheduleChangedReport struct {
	Changecounter byte
}

func (cmd ScheduleChangedReport) CommandClassID() cc.CommandClassID {
	return 0x46
}

func (cmd ScheduleChangedReport) CommandID() cc.CommandID {
	return CommandScheduleChangedReport
}

func (cmd ScheduleChangedReport) CommandIDString() string {
	return "SCHEDULE_CHANGED_REPORT"
}

func (cmd *ScheduleChangedReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Changecounter = payload[i]
	i++

	return nil
}

func (cmd *ScheduleChangedReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.Changecounter)

	return
}
