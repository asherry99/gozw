// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package powerlevel

import (
	"encoding/binary"
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandTestNodeReport cc.CommandID = 0x06

func init() {
	gob.Register(TestNodeReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x73),
		Command:      cc.CommandID(0x06),
		Version:      1,
	}, NewTestNodeReport)
}

func NewTestNodeReport() cc.Command {
	return &TestNodeReport{}
}

// <no value>
type TestNodeReport struct {
	TestNodeid byte

	StatusOfOperation byte

	TestFrameCount uint16
}

func (cmd TestNodeReport) CommandClassID() cc.CommandClassID {
	return 0x73
}

func (cmd TestNodeReport) CommandID() cc.CommandID {
	return CommandTestNodeReport
}

func (cmd TestNodeReport) CommandIDString() string {
	return "POWERLEVEL_TEST_NODE_REPORT"
}

func (cmd *TestNodeReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.TestNodeid = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.StatusOfOperation = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.TestFrameCount = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	return nil
}

func (cmd *TestNodeReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.TestNodeid)

	payload = append(payload, cmd.StatusOfOperation)

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.TestFrameCount)
		payload = append(payload, buf...)
	}

	return
}
