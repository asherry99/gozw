// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package firmwareupdatemd

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandStatusReport cc.CommandID = 0x07

func init() {
	gob.Register(StatusReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x7A),
		Command:      cc.CommandID(0x07),
		Version:      1,
	}, NewStatusReport)
}

func NewStatusReport() cc.Command {
	return &StatusReport{}
}

// <no value>
type StatusReport struct {
	Status byte
}

func (cmd StatusReport) CommandClassID() cc.CommandClassID {
	return 0x7A
}

func (cmd StatusReport) CommandID() cc.CommandID {
	return CommandStatusReport
}

func (cmd StatusReport) CommandIDString() string {
	return "FIRMWARE_UPDATE_MD_STATUS_REPORT"
}

func (cmd *StatusReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Status = payload[i]
	i++

	return nil
}

func (cmd *StatusReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.Status)

	return
}
