// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package silencealarm

import (
	"encoding/binary"
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandSensorAlarmSet cc.CommandID = 0x01

func init() {
	gob.Register(SensorAlarmSet{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x9D),
		Command:      cc.CommandID(0x01),
		Version:      1,
	}, NewSensorAlarmSet)
}

func NewSensorAlarmSet() cc.Command {
	return &SensorAlarmSet{}
}

// <no value>
type SensorAlarmSet struct {
	Mode byte

	Seconds uint16

	NumberOfBitMasks byte

	BitMask []byte
}

func (cmd SensorAlarmSet) CommandClassID() cc.CommandClassID {
	return 0x9D
}

func (cmd SensorAlarmSet) CommandID() cc.CommandID {
	return CommandSensorAlarmSet
}

func (cmd SensorAlarmSet) CommandIDString() string {
	return "SENSOR_ALARM_SET"
}

func (cmd *SensorAlarmSet) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Mode = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Seconds = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NumberOfBitMasks = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	{
		length := (payload[2+2]) & 0xFF
		cmd.BitMask = payload[i : i+int(length)]
		i += int(length)
	}

	return nil
}

func (cmd *SensorAlarmSet) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.Mode)

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.Seconds)
		payload = append(payload, buf...)
	}

	payload = append(payload, cmd.NumberOfBitMasks)

	if cmd.BitMask != nil && len(cmd.BitMask) > 0 {
		payload = append(payload, cmd.BitMask...)
	}

	return
}

func Noop() {
	// does nothing, just here to allow
	// consumers to invoke the init function
}
