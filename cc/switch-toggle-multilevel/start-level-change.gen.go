// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package switchtogglemultilevel

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandStartLevelChange cc.CommandID = 0x04

func init() {
	gob.Register(StartLevelChange{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x29),
		Command:      cc.CommandID(0x04),
		Version:      1,
	}, NewStartLevelChange)
}

func NewStartLevelChange() cc.Command {
	return &StartLevelChange{}
}

// <no value>
type StartLevelChange struct {
	Level struct {
		IgnoreStartLevel bool

		RollOver bool
	}

	StartLevel byte
}

func (cmd StartLevelChange) CommandClassID() cc.CommandClassID {
	return 0x29
}

func (cmd StartLevelChange) CommandID() cc.CommandID {
	return CommandStartLevelChange
}

func (cmd StartLevelChange) CommandIDString() string {
	return "SWITCH_TOGGLE_MULTILEVEL_START_LEVEL_CHANGE"
}

func (cmd *StartLevelChange) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Level.IgnoreStartLevel = payload[i]&0x20 == 0x20

	cmd.Level.RollOver = payload[i]&0x80 == 0x80

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.StartLevel = payload[i]
	i++

	return nil
}

func (cmd *StartLevelChange) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	{
		var val byte

		if cmd.Level.IgnoreStartLevel {
			val |= byte(0x20) // flip bits on
		} else {
			val &= ^byte(0x20) // flip bits off
		}

		if cmd.Level.RollOver {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	payload = append(payload, cmd.StartLevel)

	return
}
