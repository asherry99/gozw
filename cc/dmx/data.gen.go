// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package dmx

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandData cc.CommandID = 0x06

func init() {
	gob.Register(Data{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x65),
		Command:      cc.CommandID(0x06),
		Version:      1,
	}, NewData)
}

func NewData() cc.Command {
	return &Data{}
}

// <no value>
type Data struct {
	Source byte

	Properties1 struct {
		Page byte

		SequenceNo byte
	}

	DmxChannel []byte
}

func (cmd Data) CommandClassID() cc.CommandClassID {
	return 0x65
}

func (cmd Data) CommandID() cc.CommandID {
	return CommandData
}

func (cmd Data) CommandIDString() string {
	return "DMX_DATA"
}

func (cmd *Data) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Source = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.Page = (payload[i] & 0x0F)

	cmd.Properties1.SequenceNo = (payload[i] & 0x30) >> 4

	i += 1

	if len(payload) <= i {
		return nil
	}

	cmd.DmxChannel = payload[i:]

	return nil
}

func (cmd *Data) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.Source)

	{
		var val byte

		val |= (cmd.Properties1.Page) & byte(0x0F)

		val |= (cmd.Properties1.SequenceNo << byte(4)) & byte(0x30)

		payload = append(payload, val)
	}

	payload = append(payload, cmd.DmxChannel...)

	return
}
