// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package zipportal

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandGatewayConfigurationSet cc.CommandID = 0x01

func init() {
	gob.Register(GatewayConfigurationSet{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x61),
		Command:      cc.CommandID(0x01),
		Version:      1,
	}, NewGatewayConfigurationSet)
}

func NewGatewayConfigurationSet() cc.Command {
	return &GatewayConfigurationSet{}
}

// <no value>
type GatewayConfigurationSet struct {
	LanIpv6Address []byte

	LanIpv6PrefixLength byte

	PortalIpv6Prefix []byte

	PortalIpv6PrefixLength byte

	DefaultGatewayIpv6Address []byte

	PanIpv6Prefix []byte
}

func (cmd GatewayConfigurationSet) CommandClassID() cc.CommandClassID {
	return 0x61
}

func (cmd GatewayConfigurationSet) CommandID() cc.CommandID {
	return CommandGatewayConfigurationSet
}

func (cmd GatewayConfigurationSet) CommandIDString() string {
	return "GATEWAY_CONFIGURATION_SET"
}

func (cmd *GatewayConfigurationSet) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.LanIpv6Address = payload[i : i+16]

	i += 16

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.LanIpv6PrefixLength = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.PortalIpv6Prefix = payload[i : i+16]

	i += 16

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.PortalIpv6PrefixLength = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.DefaultGatewayIpv6Address = payload[i : i+16]

	i += 16

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.PanIpv6Prefix = payload[i : i+16]

	i += 16

	return nil
}

func (cmd *GatewayConfigurationSet) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	if paramLen := len(cmd.LanIpv6Address); paramLen > 16 {
		return nil, errors.New("Length overflow in array parameter LanIpv6Address")
	}

	payload = append(payload, cmd.LanIpv6Address...)

	payload = append(payload, cmd.LanIpv6PrefixLength)

	if paramLen := len(cmd.PortalIpv6Prefix); paramLen > 16 {
		return nil, errors.New("Length overflow in array parameter PortalIpv6Prefix")
	}

	payload = append(payload, cmd.PortalIpv6Prefix...)

	payload = append(payload, cmd.PortalIpv6PrefixLength)

	if paramLen := len(cmd.DefaultGatewayIpv6Address); paramLen > 16 {
		return nil, errors.New("Length overflow in array parameter DefaultGatewayIpv6Address")
	}

	payload = append(payload, cmd.DefaultGatewayIpv6Address...)

	if paramLen := len(cmd.PanIpv6Prefix); paramLen > 16 {
		return nil, errors.New("Length overflow in array parameter PanIpv6Prefix")
	}

	payload = append(payload, cmd.PanIpv6Prefix...)

	return
}

func Noop() {
	// does nothing, just here to allow
	// consumers to invoke the init function
}
