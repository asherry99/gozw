// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package zipgateway

import (
	"encoding/binary"
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandGatewayPeerSet cc.CommandID = 0x04

func init() {
	gob.Register(GatewayPeerSet{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x5F),
		Command:      cc.CommandID(0x04),
		Version:      1,
	}, NewGatewayPeerSet)
}

func NewGatewayPeerSet() cc.Command {
	return &GatewayPeerSet{}
}

// <no value>
type GatewayPeerSet struct {
	PeerProfile byte

	Ipv6Address []byte

	Port uint16

	Properties1 struct {
		PeerNameLength byte
	}

	PeerName []byte
}

func (cmd GatewayPeerSet) CommandClassID() cc.CommandClassID {
	return 0x5F
}

func (cmd GatewayPeerSet) CommandID() cc.CommandID {
	return CommandGatewayPeerSet
}

func (cmd GatewayPeerSet) CommandIDString() string {
	return "GATEWAY_PEER_SET"
}

func (cmd *GatewayPeerSet) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.PeerProfile = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Ipv6Address = payload[i : i+16]

	i += 16

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Port = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.PeerNameLength = (payload[i] & 0x3F)

	i += 1

	if len(payload) <= i {
		return nil // field is optional
	}

	{
		length := (payload[3+2]) & 0x3F
		cmd.PeerName = payload[i : i+int(length)]
		i += int(length)
	}

	return nil
}

func (cmd *GatewayPeerSet) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.PeerProfile)

	if paramLen := len(cmd.Ipv6Address); paramLen > 16 {
		return nil, errors.New("Length overflow in array parameter Ipv6Address")
	}

	payload = append(payload, cmd.Ipv6Address...)

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.Port)
		payload = append(payload, buf...)
	}

	{
		var val byte

		val |= (cmd.Properties1.PeerNameLength) & byte(0x3F)

		payload = append(payload, val)
	}

	if cmd.PeerName != nil && len(cmd.PeerName) > 0 {
		payload = append(payload, cmd.PeerName...)
	}

	return
}
