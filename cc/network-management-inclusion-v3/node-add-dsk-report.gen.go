// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package networkmanagementinclusionv3

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandNodeAddDskReport cc.CommandID = 0x13

func init() {
	gob.Register(NodeAddDskReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x34),
		Command:      cc.CommandID(0x13),
		Version:      3,
	}, NewNodeAddDskReport)
}

func NewNodeAddDskReport() cc.Command {
	return &NodeAddDskReport{}
}

// <no value>
type NodeAddDskReport struct {
	SeqNo byte

	Properties1 struct {
		InputDskLength byte
	}

	Dsk []byte
}

func (cmd NodeAddDskReport) CommandClassID() cc.CommandClassID {
	return 0x34
}

func (cmd NodeAddDskReport) CommandID() cc.CommandID {
	return CommandNodeAddDskReport
}

func (cmd NodeAddDskReport) CommandIDString() string {
	return "NODE_ADD_DSK_REPORT"
}

func (cmd *NodeAddDskReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.SeqNo = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.InputDskLength = (payload[i] & 0x0F)

	i += 1

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.Dsk = payload[i : i+16]

	i += 16

	return nil
}

func (cmd *NodeAddDskReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.SeqNo)

	{
		var val byte

		val |= (cmd.Properties1.InputDskLength) & byte(0x0F)

		payload = append(payload, val)
	}

	if paramLen := len(cmd.Dsk); paramLen > 16 {
		return nil, errors.New("Length overflow in array parameter Dsk")
	}

	payload = append(payload, cmd.Dsk...)

	return
}
