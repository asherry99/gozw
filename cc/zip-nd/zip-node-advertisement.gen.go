// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package zipnd

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandZipNodeAdvertisement cc.CommandID = 0x01

func init() {
	gob.Register(ZipNodeAdvertisement{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x58),
		Command:      cc.CommandID(0x01),
		Version:      1,
	}, NewZipNodeAdvertisement)
}

func NewZipNodeAdvertisement() cc.Command {
	return &ZipNodeAdvertisement{}
}

// <no value>
type ZipNodeAdvertisement struct {
	Properties1 struct {
		Local bool

		Validity byte
	}

	NodeId byte

	Ipv6Address []byte

	HomeId []byte
}

func (cmd ZipNodeAdvertisement) CommandClassID() cc.CommandClassID {
	return 0x58
}

func (cmd ZipNodeAdvertisement) CommandID() cc.CommandID {
	return CommandZipNodeAdvertisement
}

func (cmd ZipNodeAdvertisement) CommandIDString() string {
	return "ZIP_NODE_ADVERTISEMENT"
}

func (cmd *ZipNodeAdvertisement) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.Validity = (payload[i] & 0x03)

	cmd.Properties1.Local = payload[i]&0x04 == 0x04

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NodeId = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Ipv6Address = payload[i : i+16]

	i += 16

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.HomeId = payload[i : i+4]

	i += 4

	return nil
}

func (cmd *ZipNodeAdvertisement) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	{
		var val byte

		val |= (cmd.Properties1.Validity) & byte(0x03)

		if cmd.Properties1.Local {
			val |= byte(0x04) // flip bits on
		} else {
			val &= ^byte(0x04) // flip bits off
		}

		payload = append(payload, val)
	}

	payload = append(payload, cmd.NodeId)

	if paramLen := len(cmd.Ipv6Address); paramLen > 16 {
		return nil, errors.New("Length overflow in array parameter Ipv6Address")
	}

	payload = append(payload, cmd.Ipv6Address...)

	if paramLen := len(cmd.HomeId); paramLen > 4 {
		return nil, errors.New("Length overflow in array parameter HomeId")
	}

	payload = append(payload, cmd.HomeId...)

	return
}
