// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package irrigation

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandValveInfoGet cc.CommandID = 0x08

func init() {
	gob.Register(ValveInfoGet{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x6B),
		Command:      cc.CommandID(0x08),
		Version:      1,
	}, NewValveInfoGet)
}

func NewValveInfoGet() cc.Command {
	return &ValveInfoGet{}
}

// <no value>
type ValveInfoGet struct {
	Properties1 struct {
		MasterValve bool
	}

	ValveId byte
}

func (cmd ValveInfoGet) CommandClassID() cc.CommandClassID {
	return 0x6B
}

func (cmd ValveInfoGet) CommandID() cc.CommandID {
	return CommandValveInfoGet
}

func (cmd ValveInfoGet) CommandIDString() string {
	return "IRRIGATION_VALVE_INFO_GET"
}

func (cmd *ValveInfoGet) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.MasterValve = payload[i]&0x01 == 0x01

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.ValveId = payload[i]
	i++

	return nil
}

func (cmd *ValveInfoGet) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	{
		var val byte

		if cmd.Properties1.MasterValve {
			val |= byte(0x01) // flip bits on
		} else {
			val &= ^byte(0x01) // flip bits off
		}

		payload = append(payload, val)
	}

	payload = append(payload, cmd.ValveId)

	return
}
