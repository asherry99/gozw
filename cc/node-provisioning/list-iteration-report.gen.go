// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package nodeprovisioning

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandListIterationReport cc.CommandID = 0x04

func init() {
	gob.Register(ListIterationReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x78),
		Command:      cc.CommandID(0x04),
		Version:      1,
	}, NewListIterationReport)
}

func NewListIterationReport() cc.Command {
	return &ListIterationReport{}
}

// <no value>
type ListIterationReport struct {
	SeqNo byte

	RemainingCount byte

	Properties1 struct {
		DskLength byte
	}

	Dsk []byte

	Vg1 []ListIterationReportVg1
}

type ListIterationReportVg1 struct {
	Properties2 struct {
		MetaDataType byte

		Critical bool
	}

	Length byte

	Value []byte
}

func (cmd ListIterationReport) CommandClassID() cc.CommandClassID {
	return 0x78
}

func (cmd ListIterationReport) CommandID() cc.CommandID {
	return CommandListIterationReport
}

func (cmd ListIterationReport) CommandIDString() string {
	return "NODE_PROVISIONING_LIST_ITERATION_REPORT"
}

func (cmd *ListIterationReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.SeqNo = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.RemainingCount = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.DskLength = (payload[i] & 0x1F)

	i += 1

	if len(payload) <= i {
		return nil // field is optional
	}

	{
		length := (payload[2+2]) & 0x1F
		cmd.Dsk = payload[i : i+int(length)]
		i += int(length)
	}

	for i < len(payload) {

		vg1 := ListIterationReportVg1{}

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		vg1.Properties2.MetaDataType = (payload[i] & 0xFE) >> 1

		vg1.Properties2.Critical = payload[i]&0x01 == 0x01

		i += 1

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		length := payload[i]
		i++

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		length = (payload[1+2]) & 0xFF
		value := payload[i : i+int(length)]
		i += int(length)

		// struct byte fields are assigned to the variant group when computed

		vg1.Length = length

		vg1.Value = value

		cmd.Vg1 = append(cmd.Vg1, vg1)
	}

	return nil
}

func (cmd *ListIterationReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.SeqNo)

	payload = append(payload, cmd.RemainingCount)

	{
		var val byte

		val |= (cmd.Properties1.DskLength) & byte(0x1F)

		payload = append(payload, val)
	}

	if cmd.Dsk != nil && len(cmd.Dsk) > 0 {
		payload = append(payload, cmd.Dsk...)
	}

	for _, vg := range cmd.Vg1 {

		{
			var val byte

			val |= (vg.Properties2.MetaDataType << byte(1)) & byte(0xFE)

			if vg.Properties2.Critical {
				val |= byte(0x01) // flip bits on
			} else {
				val &= ^byte(0x01) // flip bits off
			}

			payload = append(payload, val)
		}

		payload = append(payload, vg.Length)

		if vg.Value != nil && len(vg.Value) > 0 {
			payload = append(payload, vg.Value...)
		}

	}

	return
}
