// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package metertblmonitorv2

import (
	"encoding/binary"
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandMeterTblStatusReport cc.CommandID = 0x0B

func init() {
	gob.Register(MeterTblStatusReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x3D),
		Command:      cc.CommandID(0x0B),
		Version:      2,
	}, NewMeterTblStatusReport)
}

func NewMeterTblStatusReport() cc.Command {
	return &MeterTblStatusReport{}
}

// <no value>
type MeterTblStatusReport struct {
	ReportsToFollow byte

	CurrentOperatingStatus uint32

	Vg []MeterTblStatusReportVg
}

type MeterTblStatusReportVg struct {
	Properties1 struct {
		OperatingStatusEventId byte

		Type bool
	}

	Year uint16

	Month byte

	Day byte

	HourLocalTime byte

	MinuteLocalTime byte

	SecondLocalTime byte
}

func (cmd MeterTblStatusReport) CommandClassID() cc.CommandClassID {
	return 0x3D
}

func (cmd MeterTblStatusReport) CommandID() cc.CommandID {
	return CommandMeterTblStatusReport
}

func (cmd MeterTblStatusReport) CommandIDString() string {
	return "METER_TBL_STATUS_REPORT"
}

func (cmd *MeterTblStatusReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.ReportsToFollow = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.CurrentOperatingStatus = binary.BigEndian.Uint32(payload[i : i+3])
	i += 3

	for i < len(payload) {

		vg := MeterTblStatusReportVg{}

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		vg.Properties1.OperatingStatusEventId = (payload[i] & 0x1F)

		vg.Properties1.Type = payload[i]&0x80 == 0x80

		i += 1

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		year := binary.BigEndian.Uint16(payload[i : i+2])
		i += 2

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		month := payload[i]
		i++

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		day := payload[i]
		i++

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		hourLocalTime := payload[i]
		i++

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		minuteLocalTime := payload[i]
		i++

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		secondLocalTime := payload[i]
		i++

		// struct byte fields are assigned to the variant group when computed

		vg.Year = year

		vg.Month = month

		vg.Day = day

		vg.HourLocalTime = hourLocalTime

		vg.MinuteLocalTime = minuteLocalTime

		vg.SecondLocalTime = secondLocalTime

		cmd.Vg = append(cmd.Vg, vg)
	}

	return nil
}

func (cmd *MeterTblStatusReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.ReportsToFollow)

	{
		buf := make([]byte, 4)
		binary.BigEndian.PutUint32(buf, cmd.CurrentOperatingStatus)
		if buf[0] != 0 {
			return nil, errors.New("BIT_24 value overflow")
		}
		payload = append(payload, buf[1:4]...)
	}

	for _, vg := range cmd.Vg {

		{
			var val byte

			val |= (vg.Properties1.OperatingStatusEventId) & byte(0x1F)

			if vg.Properties1.Type {
				val |= byte(0x80) // flip bits on
			} else {
				val &= ^byte(0x80) // flip bits off
			}

			payload = append(payload, val)
		}

		{
			buf := make([]byte, 2)
			binary.BigEndian.PutUint16(buf, vg.Year)
			payload = append(payload, buf...)
		}

		payload = append(payload, vg.Month)

		payload = append(payload, vg.Day)

		payload = append(payload, vg.HourLocalTime)

		payload = append(payload, vg.MinuteLocalTime)

		payload = append(payload, vg.SecondLocalTime)

	}

	return
}

func Noop() {
	// does nothing, just here to allow
	// consumers to invoke the init function
}
