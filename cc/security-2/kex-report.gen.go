// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package security2

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandKexReport cc.CommandID = 0x05

func init() {
	gob.Register(KexReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x9F),
		Command:      cc.CommandID(0x05),
		Version:      1,
	}, NewKexReport)
}

func NewKexReport() cc.Command {
	return &KexReport{}
}

// <no value>
type KexReport struct {
	Properties1 struct {
		Echo bool

		RequestCsa bool
	}

	SupportedKexSchemes byte

	SupportedEcdhProfiles byte

	RequestedKeys []byte
}

func (cmd KexReport) CommandClassID() cc.CommandClassID {
	return 0x9F
}

func (cmd KexReport) CommandID() cc.CommandID {
	return CommandKexReport
}

func (cmd KexReport) CommandIDString() string {
	return "KEX_REPORT"
}

func (cmd *KexReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.Echo = payload[i]&0x01 == 0x01

	cmd.Properties1.RequestCsa = payload[i]&0x02 == 0x02

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.SupportedKexSchemes = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.SupportedEcdhProfiles = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.RequestedKeys = payload[i:]

	return nil
}

func (cmd *KexReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	{
		var val byte

		if cmd.Properties1.Echo {
			val |= byte(0x01) // flip bits on
		} else {
			val &= ^byte(0x01) // flip bits off
		}

		if cmd.Properties1.RequestCsa {
			val |= byte(0x02) // flip bits on
		} else {
			val &= ^byte(0x02) // flip bits off
		}

		payload = append(payload, val)
	}

	payload = append(payload, cmd.SupportedKexSchemes)

	payload = append(payload, cmd.SupportedEcdhProfiles)

	payload = append(payload, cmd.RequestedKeys...)

	return
}
