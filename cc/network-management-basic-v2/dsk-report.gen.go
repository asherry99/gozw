// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package networkmanagementbasicv2

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandDskReport cc.CommandID = 0x09

func init() {
	gob.Register(DskReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x4D),
		Command:      cc.CommandID(0x09),
		Version:      2,
	}, NewDskReport)
}

func NewDskReport() cc.Command {
	return &DskReport{}
}

// <no value>
type DskReport struct {
	SeqNo byte

	Properties1 struct {
		AddMode bool
	}

	Dsk []byte
}

func (cmd DskReport) CommandClassID() cc.CommandClassID {
	return 0x4D
}

func (cmd DskReport) CommandID() cc.CommandID {
	return CommandDskReport
}

func (cmd DskReport) CommandIDString() string {
	return "DSK_REPORT"
}

func (cmd *DskReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.SeqNo = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.AddMode = payload[i]&0x01 == 0x01

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Dsk = payload[i : i+16]

	i += 16

	return nil
}

func (cmd *DskReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.SeqNo)

	{
		var val byte

		if cmd.Properties1.AddMode {
			val |= byte(0x01) // flip bits on
		} else {
			val &= ^byte(0x01) // flip bits off
		}

		payload = append(payload, val)
	}

	if paramLen := len(cmd.Dsk); paramLen > 16 {
		return nil, errors.New("Length overflow in array parameter Dsk")
	}

	payload = append(payload, cmd.Dsk...)

	return
}
