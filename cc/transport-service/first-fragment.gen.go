// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package transportservice

import (
	"encoding/binary"
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandFirstFragment cc.CommandID = 0xC0

func init() {
	gob.Register(FirstFragment{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x55),
		Command:      cc.CommandID(0xC0),
		Version:      1,
	}, NewFirstFragment)
}

func NewFirstFragment() cc.Command {
	return &FirstFragment{}
}

// <no value>
type FirstFragment struct {
	Properties1 struct {
		DatagramSize1 byte
	}

	DatagramSize2 byte

	Properties2 struct {
		SequenceNo byte
	}

	Payload []byte

	Checksum uint16
}

func (cmd FirstFragment) CommandClassID() cc.CommandClassID {
	return 0x55
}

func (cmd FirstFragment) CommandID() cc.CommandID {
	return CommandFirstFragment
}

func (cmd FirstFragment) CommandIDString() string {
	return "COMMAND_FIRST_FRAGMENT"
}

func (cmd *FirstFragment) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.DatagramSize1 = (payload[i] & 0x07)

	i += 1

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.DatagramSize2 = payload[i]
	i++

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.Properties2.SequenceNo = (payload[i] & 0x0F)

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Payload = payload[i : len(payload)-2]
	i += len(cmd.Payload)

	cmd.Checksum = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	return nil
}

func (cmd *FirstFragment) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	{
		var val byte

		val |= (cmd.Properties1.DatagramSize1) & byte(0x07)

		payload = append(payload, val)
	}

	payload = append(payload, cmd.DatagramSize2)

	{
		var val byte

		val |= (cmd.Properties2.SequenceNo) & byte(0x0F)

		payload = append(payload, val)
	}

	payload = append(payload, cmd.Payload...)

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.Checksum)
		payload = append(payload, buf...)
	}

	return
}

func Noop() {
	// does nothing, just here to allow
	// consumers to invoke the init function
}
