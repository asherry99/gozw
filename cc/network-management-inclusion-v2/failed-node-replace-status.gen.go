// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package networkmanagementinclusionv2

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandFailedNodeReplaceStatus cc.CommandID = 0x0A

func init() {
	gob.Register(FailedNodeReplaceStatus{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x34),
		Command:      cc.CommandID(0x0A),
		Version:      2,
	}, NewFailedNodeReplaceStatus)
}

func NewFailedNodeReplaceStatus() cc.Command {
	return &FailedNodeReplaceStatus{}
}

// <no value>
type FailedNodeReplaceStatus struct {
	SeqNo byte

	Status byte

	NodeId byte

	GrantedKeys byte

	KexFailType byte
}

func (cmd FailedNodeReplaceStatus) CommandClassID() cc.CommandClassID {
	return 0x34
}

func (cmd FailedNodeReplaceStatus) CommandID() cc.CommandID {
	return CommandFailedNodeReplaceStatus
}

func (cmd FailedNodeReplaceStatus) CommandIDString() string {
	return "FAILED_NODE_REPLACE_STATUS"
}

func (cmd *FailedNodeReplaceStatus) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.SeqNo = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Status = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NodeId = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.GrantedKeys = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.KexFailType = payload[i]
	i++

	return nil
}

func (cmd *FailedNodeReplaceStatus) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.SeqNo)

	payload = append(payload, cmd.Status)

	payload = append(payload, cmd.NodeId)

	payload = append(payload, cmd.GrantedKeys)

	payload = append(payload, cmd.KexFailType)

	return
}
