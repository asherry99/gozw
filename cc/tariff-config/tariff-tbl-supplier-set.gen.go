// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package tariffconfig

import (
	"encoding/binary"
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandTariffTblSupplierSet cc.CommandID = 0x01

func init() {
	gob.Register(TariffTblSupplierSet{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x4A),
		Command:      cc.CommandID(0x01),
		Version:      1,
	}, NewTariffTblSupplierSet)
}

func NewTariffTblSupplierSet() cc.Command {
	return &TariffTblSupplierSet{}
}

// <no value>
type TariffTblSupplierSet struct {
	Year uint16

	Month byte

	Day byte

	HourLocalTime byte

	MinuteLocalTime byte

	SecondLocalTime byte

	Currency uint32

	Properties1 struct {
		StandingChargePeriod byte

		StandingChargePrecision byte
	}

	StandingChargeValue uint32

	Properties2 struct {
		NumberOfSupplierCharacters byte
	}

	SupplierCharacter []byte
}

func (cmd TariffTblSupplierSet) CommandClassID() cc.CommandClassID {
	return 0x4A
}

func (cmd TariffTblSupplierSet) CommandID() cc.CommandID {
	return CommandTariffTblSupplierSet
}

func (cmd TariffTblSupplierSet) CommandIDString() string {
	return "TARIFF_TBL_SUPPLIER_SET"
}

func (cmd *TariffTblSupplierSet) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Year = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Month = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Day = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.HourLocalTime = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.MinuteLocalTime = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.SecondLocalTime = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Currency = binary.BigEndian.Uint32(payload[i : i+3])
	i += 3

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.StandingChargePeriod = (payload[i] & 0x1F)

	cmd.Properties1.StandingChargePrecision = (payload[i] & 0xE0) >> 5

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.StandingChargeValue = binary.BigEndian.Uint32(payload[i : i+4])
	i += 4

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties2.NumberOfSupplierCharacters = (payload[i] & 0x1F)

	i += 1

	if len(payload) <= i {
		return nil // field is optional
	}

	{
		length := (payload[9+2]) & 0x1F
		cmd.SupplierCharacter = payload[i : i+int(length)]
		i += int(length)
	}

	return nil
}

func (cmd *TariffTblSupplierSet) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.Year)
		payload = append(payload, buf...)
	}

	payload = append(payload, cmd.Month)

	payload = append(payload, cmd.Day)

	payload = append(payload, cmd.HourLocalTime)

	payload = append(payload, cmd.MinuteLocalTime)

	payload = append(payload, cmd.SecondLocalTime)

	{
		buf := make([]byte, 4)
		binary.BigEndian.PutUint32(buf, cmd.Currency)
		if buf[0] != 0 {
			return nil, errors.New("BIT_24 value overflow")
		}
		payload = append(payload, buf[1:4]...)
	}

	{
		var val byte

		val |= (cmd.Properties1.StandingChargePeriod) & byte(0x1F)

		val |= (cmd.Properties1.StandingChargePrecision << byte(5)) & byte(0xE0)

		payload = append(payload, val)
	}

	{
		buf := make([]byte, 4)
		binary.BigEndian.PutUint32(buf, cmd.StandingChargeValue)
		payload = append(payload, buf...)
	}

	{
		var val byte

		val |= (cmd.Properties2.NumberOfSupplierCharacters) & byte(0x1F)

		payload = append(payload, val)
	}

	if cmd.SupplierCharacter != nil && len(cmd.SupplierCharacter) > 0 {
		payload = append(payload, cmd.SupplierCharacter...)
	}

	return
}
