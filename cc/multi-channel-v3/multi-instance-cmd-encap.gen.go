// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package multichannelv3

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandMultiInstanceCmdEncap cc.CommandID = 0x06

func init() {
	gob.Register(MultiInstanceCmdEncap{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x60),
		Command:      cc.CommandID(0x06),
		Version:      3,
	}, NewMultiInstanceCmdEncap)
}

func NewMultiInstanceCmdEncap() cc.Command {
	return &MultiInstanceCmdEncap{}
}

// <no value>
type MultiInstanceCmdEncap struct {
	Properties1 struct {
		Instance byte
	}

	CommandClass byte

	Command byte

	Parameter []byte
}

func (cmd MultiInstanceCmdEncap) CommandClassID() cc.CommandClassID {
	return 0x60
}

func (cmd MultiInstanceCmdEncap) CommandID() cc.CommandID {
	return CommandMultiInstanceCmdEncap
}

func (cmd MultiInstanceCmdEncap) CommandIDString() string {
	return "MULTI_INSTANCE_CMD_ENCAP"
}

func (cmd *MultiInstanceCmdEncap) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.Instance = (payload[i] & 0x7F)

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.CommandClass = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Command = payload[i]
	i++

	if len(payload) <= i {
		return nil
	}

	cmd.Parameter = payload[i:]

	return nil
}

func (cmd *MultiInstanceCmdEncap) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	{
		var val byte

		val |= (cmd.Properties1.Instance) & byte(0x7F)

		payload = append(payload, val)
	}

	payload = append(payload, cmd.CommandClass)

	payload = append(payload, cmd.Command)

	payload = append(payload, cmd.Parameter...)

	return
}
