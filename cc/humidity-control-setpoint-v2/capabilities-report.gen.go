// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package humiditycontrolsetpointv2

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandCapabilitiesReport cc.CommandID = 0x09

func init() {
	gob.Register(CapabilitiesReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x64),
		Command:      cc.CommandID(0x09),
		Version:      2,
	}, NewCapabilitiesReport)
}

func NewCapabilitiesReport() cc.Command {
	return &CapabilitiesReport{}
}

// <no value>
type CapabilitiesReport struct {
	Properties1 struct {
		SetpointType byte
	}

	Properties2 struct {
		Size1 byte

		Precision1 byte

		Scale1 byte
	}

	MinimumValue []byte

	Properties3 struct {
		Size2 byte

		Precision2 byte

		Scale2 byte
	}

	MaximumValue []byte
}

func (cmd CapabilitiesReport) CommandClassID() cc.CommandClassID {
	return 0x64
}

func (cmd CapabilitiesReport) CommandID() cc.CommandID {
	return CommandCapabilitiesReport
}

func (cmd CapabilitiesReport) CommandIDString() string {
	return "HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT"
}

func (cmd *CapabilitiesReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.SetpointType = (payload[i] & 0x0F)

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties2.Size1 = (payload[i] & 0x07)

	cmd.Properties2.Precision1 = (payload[i] & 0xE0) >> 5

	cmd.Properties2.Scale1 = (payload[i] & 0x18) >> 3

	i += 1

	if len(payload) <= i {
		return nil // field is optional
	}

	{
		length := (payload[1+2]) & 0x07
		cmd.MinimumValue = payload[i : i+int(length)]
		i += int(length)
	}

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.Properties3.Size2 = (payload[i] & 0x07)

	cmd.Properties3.Precision2 = (payload[i] & 0xE0) >> 5

	cmd.Properties3.Scale2 = (payload[i] & 0x18) >> 3

	i += 1

	if len(payload) <= i {
		return nil // field is optional
	}

	{
		length := (payload[3+2]) & 0x07
		cmd.MaximumValue = payload[i : i+int(length)]
		i += int(length)
	}

	return nil
}

func (cmd *CapabilitiesReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	{
		var val byte

		val |= (cmd.Properties1.SetpointType) & byte(0x0F)

		payload = append(payload, val)
	}

	{
		var val byte

		val |= (cmd.Properties2.Size1) & byte(0x07)

		val |= (cmd.Properties2.Precision1 << byte(5)) & byte(0xE0)

		val |= (cmd.Properties2.Scale1 << byte(3)) & byte(0x18)

		payload = append(payload, val)
	}

	if cmd.MinimumValue != nil && len(cmd.MinimumValue) > 0 {
		payload = append(payload, cmd.MinimumValue...)
	}

	{
		var val byte

		val |= (cmd.Properties3.Size2) & byte(0x07)

		val |= (cmd.Properties3.Precision2 << byte(5)) & byte(0xE0)

		val |= (cmd.Properties3.Scale2 << byte(3)) & byte(0x18)

		payload = append(payload, val)
	}

	if cmd.MaximumValue != nil && len(cmd.MaximumValue) > 0 {
		payload = append(payload, cmd.MaximumValue...)
	}

	return
}
