// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package indicatorv2

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandSupportedReport cc.CommandID = 0x05

func init() {
	gob.Register(SupportedReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x87),
		Command:      cc.CommandID(0x05),
		Version:      2,
	}, NewSupportedReport)
}

func NewSupportedReport() cc.Command {
	return &SupportedReport{}
}

// <no value>
type SupportedReport struct {
	IndicatorId byte

	NextIndicatorId byte

	Properties1 struct {
		PropertySupportedBitMaskLength byte
	}

	PropertySupportedBitMask []byte
}

func (cmd SupportedReport) CommandClassID() cc.CommandClassID {
	return 0x87
}

func (cmd SupportedReport) CommandID() cc.CommandID {
	return CommandSupportedReport
}

func (cmd SupportedReport) CommandIDString() string {
	return "INDICATOR_SUPPORTED_REPORT"
}

func (cmd *SupportedReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.IndicatorId = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NextIndicatorId = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.PropertySupportedBitMaskLength = (payload[i] & 0x1F)

	i += 1

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.PropertySupportedBitMask = payload[i:]

	return nil
}

func (cmd *SupportedReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.IndicatorId)

	payload = append(payload, cmd.NextIndicatorId)

	{
		var val byte

		val |= (cmd.Properties1.PropertySupportedBitMaskLength) & byte(0x1F)

		payload = append(payload, val)
	}

	payload = append(payload, cmd.PropertySupportedBitMask...)

	return
}
