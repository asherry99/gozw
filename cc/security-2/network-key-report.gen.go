// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package security2

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandNetworkKeyReport cc.CommandID = 0x0A

func init() {
	gob.Register(NetworkKeyReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x9F),
		Command:      cc.CommandID(0x0A),
		Version:      1,
	}, NewNetworkKeyReport)
}

func NewNetworkKeyReport() cc.Command {
	return &NetworkKeyReport{}
}

// <no value>
type NetworkKeyReport struct {
	GrantedKey byte

	NetworkKey []byte
}

func (cmd NetworkKeyReport) CommandClassID() cc.CommandClassID {
	return 0x9F
}

func (cmd NetworkKeyReport) CommandID() cc.CommandID {
	return CommandNetworkKeyReport
}

func (cmd NetworkKeyReport) CommandIDString() string {
	return "SECURITY_2_NETWORK_KEY_REPORT"
}

func (cmd *NetworkKeyReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.GrantedKey = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NetworkKey = payload[i : i+16]

	i += 16

	return nil
}

func (cmd *NetworkKeyReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.GrantedKey)

	if paramLen := len(cmd.NetworkKey); paramLen > 16 {
		return nil, errors.New("Length overflow in array parameter NetworkKey")
	}

	payload = append(payload, cmd.NetworkKey...)

	return
}
