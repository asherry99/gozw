// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package zip6lowpan

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandLowpanSubsequentFragment cc.CommandID = 0xE0

func init() {
	gob.Register(LowpanSubsequentFragment{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x4F),
		Command:      cc.CommandID(0xE0),
		Version:      1,
	}, NewLowpanSubsequentFragment)
}

func NewLowpanSubsequentFragment() cc.Command {
	return &LowpanSubsequentFragment{}
}

// <no value>
type LowpanSubsequentFragment struct {
	Properties1 struct {
		DatagramSize1 byte
	}

	DatagramSize2 byte

	DatagramTag byte

	DatagramOffset byte

	Payload []byte
}

func (cmd LowpanSubsequentFragment) CommandClassID() cc.CommandClassID {
	return 0x4F
}

func (cmd LowpanSubsequentFragment) CommandID() cc.CommandID {
	return CommandLowpanSubsequentFragment
}

func (cmd LowpanSubsequentFragment) CommandIDString() string {
	return "LOWPAN_SUBSEQUENT_FRAGMENT"
}

func (cmd *LowpanSubsequentFragment) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.DatagramSize1 = (payload[i] & 0x07)

	i += 1

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.DatagramSize2 = payload[i]
	i++

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.DatagramTag = payload[i]
	i++

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.DatagramOffset = payload[i]
	i++

	if len(payload) <= i {
		return nil
	}

	cmd.Payload = payload[i:]

	return nil
}

func (cmd *LowpanSubsequentFragment) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	{
		var val byte

		val |= (cmd.Properties1.DatagramSize1) & byte(0x07)

		payload = append(payload, val)
	}

	payload = append(payload, cmd.DatagramSize2)

	payload = append(payload, cmd.DatagramTag)

	payload = append(payload, cmd.DatagramOffset)

	payload = append(payload, cmd.Payload...)

	return
}
