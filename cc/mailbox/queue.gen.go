// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package mailbox

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandQueue cc.CommandID = 0x04

func init() {
	gob.Register(Queue{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x69),
		Command:      cc.CommandID(0x04),
		Version:      1,
	}, NewQueue)
}

func NewQueue() cc.Command {
	return &Queue{}
}

// <no value>
type Queue struct {
	SequenceNumber byte

	Properties1 struct {
		Last bool

		Mode byte
	}

	QueueHandle byte

	MailboxEntry []byte
}

func (cmd Queue) CommandClassID() cc.CommandClassID {
	return 0x69
}

func (cmd Queue) CommandID() cc.CommandID {
	return CommandQueue
}

func (cmd Queue) CommandIDString() string {
	return "MAILBOX_QUEUE"
}

func (cmd *Queue) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.SequenceNumber = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.Mode = (payload[i] & 0x03)

	cmd.Properties1.Last = payload[i]&0x04 == 0x04

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.QueueHandle = payload[i]
	i++

	if len(payload) <= i {
		return nil
	}

	cmd.MailboxEntry = payload[i:]

	return nil
}

func (cmd *Queue) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.SequenceNumber)

	{
		var val byte

		val |= (cmd.Properties1.Mode) & byte(0x03)

		if cmd.Properties1.Last {
			val |= byte(0x04) // flip bits on
		} else {
			val &= ^byte(0x04) // flip bits off
		}

		payload = append(payload, val)
	}

	payload = append(payload, cmd.QueueHandle)

	payload = append(payload, cmd.MailboxEntry...)

	return
}
