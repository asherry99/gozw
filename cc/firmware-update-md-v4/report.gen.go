// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package firmwareupdatemdv4

import (
	"encoding/binary"
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandReport cc.CommandID = 0x06

func init() {
	gob.Register(Report{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x7A),
		Command:      cc.CommandID(0x06),
		Version:      4,
	}, NewReport)
}

func NewReport() cc.Command {
	return &Report{}
}

// <no value>
type Report struct {
	Properties1 struct {
		ReportNumber1 byte

		Last bool
	}

	ReportNumber2 byte

	Data []byte

	Checksum uint16
}

func (cmd Report) CommandClassID() cc.CommandClassID {
	return 0x7A
}

func (cmd Report) CommandID() cc.CommandID {
	return CommandReport
}

func (cmd Report) CommandIDString() string {
	return "FIRMWARE_UPDATE_MD_REPORT"
}

func (cmd *Report) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.ReportNumber1 = (payload[i] & 0x7F)

	cmd.Properties1.Last = payload[i]&0x80 == 0x80

	i += 1

	if len(payload) <= i {
		return nil // field is optional
	}

	cmd.ReportNumber2 = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Data = payload[i : len(payload)-2]
	i += len(cmd.Data)

	cmd.Checksum = binary.BigEndian.Uint16(payload[i : i+2])
	i += 2

	return nil
}

func (cmd *Report) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	{
		var val byte

		val |= (cmd.Properties1.ReportNumber1) & byte(0x7F)

		if cmd.Properties1.Last {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	payload = append(payload, cmd.ReportNumber2)

	payload = append(payload, cmd.Data...)

	{
		buf := make([]byte, 2)
		binary.BigEndian.PutUint16(buf, cmd.Checksum)
		payload = append(payload, buf...)
	}

	return
}
