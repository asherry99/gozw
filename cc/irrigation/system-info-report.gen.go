// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package irrigation

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandSystemInfoReport cc.CommandID = 0x02

func init() {
	gob.Register(SystemInfoReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x6B),
		Command:      cc.CommandID(0x02),
		Version:      1,
	}, NewSystemInfoReport)
}

func NewSystemInfoReport() cc.Command {
	return &SystemInfoReport{}
}

// <no value>
type SystemInfoReport struct {
	Properties1 struct {
		MasterValve bool
	}

	TotalNumberOfValves byte

	TotalNumberOfValveTables byte

	Properties2 struct {
		ValveTableMaxSize byte
	}
}

func (cmd SystemInfoReport) CommandClassID() cc.CommandClassID {
	return 0x6B
}

func (cmd SystemInfoReport) CommandID() cc.CommandID {
	return CommandSystemInfoReport
}

func (cmd SystemInfoReport) CommandIDString() string {
	return "IRRIGATION_SYSTEM_INFO_REPORT"
}

func (cmd *SystemInfoReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.MasterValve = payload[i]&0x01 == 0x01

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.TotalNumberOfValves = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.TotalNumberOfValveTables = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties2.ValveTableMaxSize = (payload[i] & 0x0F)

	i += 1

	return nil
}

func (cmd *SystemInfoReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	{
		var val byte

		if cmd.Properties1.MasterValve {
			val |= byte(0x01) // flip bits on
		} else {
			val &= ^byte(0x01) // flip bits off
		}

		payload = append(payload, val)
	}

	payload = append(payload, cmd.TotalNumberOfValves)

	payload = append(payload, cmd.TotalNumberOfValveTables)

	{
		var val byte

		val |= (cmd.Properties2.ValveTableMaxSize) & byte(0x0F)

		payload = append(payload, val)
	}

	return
}
