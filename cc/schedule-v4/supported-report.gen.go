// THIS FILE IS AUTO-GENERATED BY ZWGEN
// DO NOT MODIFY

package schedulev4

import (
	"encoding/gob"
	"errors"

	"github.com/gozwave/gozw/cc"
)

const CommandSupportedReport cc.CommandID = 0x02

func init() {
	gob.Register(SupportedReport{})
	cc.Register(cc.CommandIdentifier{
		CommandClass: cc.CommandClassID(0x53),
		Command:      cc.CommandID(0x02),
		Version:      4,
	}, NewSupportedReport)
}

func NewSupportedReport() cc.Command {
	return &SupportedReport{}
}

// <no value>
type SupportedReport struct {
	NumberOfSupportedScheduleId byte

	Properties1 struct {
		StartTimeSupport byte

		FallbackSupport bool

		SupportEnabledisable bool
	}

	NumberOfSupportedCc byte

	Properties3 struct {
		SupportedOverrideTypes byte

		OverrideSupport bool
	}

	ScheduleIdBlock byte

	NumberOfSupportedScheduleBlocks byte

	Vg1 []SupportedReportVg1
}

type SupportedReportVg1 struct {
	SupportedCc byte

	Properties2 struct {
		SupportedCommand byte
	}
}

func (cmd SupportedReport) CommandClassID() cc.CommandClassID {
	return 0x53
}

func (cmd SupportedReport) CommandID() cc.CommandID {
	return CommandSupportedReport
}

func (cmd SupportedReport) CommandIDString() string {
	return "SCHEDULE_SUPPORTED_REPORT"
}

func (cmd *SupportedReport) UnmarshalBinary(data []byte) error {
	// According to the docs, we must copy data if we wish to retain it after returning

	payload := make([]byte, len(data))
	copy(payload, data)

	if len(payload) < 2 {
		return errors.New("Payload length underflow")
	}

	i := 2

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NumberOfSupportedScheduleId = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties1.StartTimeSupport = (payload[i] & 0x3F)

	cmd.Properties1.FallbackSupport = payload[i]&0x40 == 0x40

	cmd.Properties1.SupportEnabledisable = payload[i]&0x80 == 0x80

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NumberOfSupportedCc = payload[i]
	i++

	for i < int(cmd.NumberOfSupportedCc) {

		vg1 := SupportedReportVg1{}

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		supportedCc := payload[i]
		i++

		if len(payload) <= i {
			return errors.New("slice index out of bounds")
		}

		vg1.Properties2.SupportedCommand = (payload[i] & 0x03)

		i += 1

		vg1.SupportedCc = supportedCc

		// struct byte fields are assigned to the variant group when computed

		cmd.Vg1 = append(cmd.Vg1, vg1)
	}

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.Properties3.SupportedOverrideTypes = (payload[i] & 0x7F)

	cmd.Properties3.OverrideSupport = payload[i]&0x80 == 0x80

	i += 1

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.ScheduleIdBlock = payload[i]
	i++

	if len(payload) <= i {
		return errors.New("slice index out of bounds")
	}

	cmd.NumberOfSupportedScheduleBlocks = payload[i]
	i++

	return nil
}

func (cmd *SupportedReport) MarshalBinary() (payload []byte, err error) {
	payload = make([]byte, 2)
	payload[0] = byte(cmd.CommandClassID())
	payload[1] = byte(cmd.CommandID())

	payload = append(payload, cmd.NumberOfSupportedScheduleId)

	{
		var val byte

		val |= (cmd.Properties1.StartTimeSupport) & byte(0x3F)

		if cmd.Properties1.FallbackSupport {
			val |= byte(0x40) // flip bits on
		} else {
			val &= ^byte(0x40) // flip bits off
		}

		if cmd.Properties1.SupportEnabledisable {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	payload = append(payload, cmd.NumberOfSupportedCc)

	for _, vg := range cmd.Vg1 {

		payload = append(payload, vg.SupportedCc)

		{
			var val byte

			val |= (vg.Properties2.SupportedCommand) & byte(0x03)

			payload = append(payload, val)
		}

	}

	{
		var val byte

		val |= (cmd.Properties3.SupportedOverrideTypes) & byte(0x7F)

		if cmd.Properties3.OverrideSupport {
			val |= byte(0x80) // flip bits on
		} else {
			val &= ^byte(0x80) // flip bits off
		}

		payload = append(payload, val)
	}

	payload = append(payload, cmd.ScheduleIdBlock)

	payload = append(payload, cmd.NumberOfSupportedScheduleBlocks)

	return
}
